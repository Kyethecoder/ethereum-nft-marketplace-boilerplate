{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _typeof3 = require(\"@babel/runtime-corejs3/helpers/typeof\");\n\nvar _WeakMap = require(\"@babel/runtime-corejs3/core-js-stable/weak-map\");\n\nvar _Array$isArray2 = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\n\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\n\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\n\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\n\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\n\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\n\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\n\nvar _unique = _interopRequireDefault(require(\"./unique\"));\n\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\n\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof _WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new _WeakMap();\n  var cacheNodeInterop = new _WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof3(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = _Object$defineProperty2 && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        _Object$defineProperty2(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\n\n  if (!it) {\n    if (_Array$isArray2(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context21;\n\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\n  var n = _sliceInstanceProperty(_context21 = Object.prototype.toString.call(o)).call(_context21, 8, -1);\n\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      var _context19;\n\n      _forEachInstanceProperty2(_context19 = ownKeys(Object(source), true)).call(_context19, function (key) {\n        (0, _defineProperty3.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      var _context20;\n\n      _forEachInstanceProperty2(_context20 = ownKeys(Object(source))).call(_context20, function (key) {\n        _Object$defineProperty2(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar uuidv4 = require('uuid/v4');\n/*:: export type Pointer = {\n  __type: string,\n  className: string,\n  objectId: string,\n};*/\n\n/*:: type SaveParams = {\n  method: string,\n  path: string,\n  body: AttributeMap,\n};*/\n\n/*:: type SaveOptions = FullOptions & {\n  cascadeSave?: boolean,\n  context?: AttributeMap,\n};*/\n// Mapping of class names to constructors, so we can populate objects from the\n// server with appropriate subclasses of ParseObject\n\n\nvar classMap = {}; // Global counter for generating unique Ids for non-single-instance objects\n\nvar objectCount = 0; // On web clients, objects are single-instance: any two objects with the same Id\n// will have the same attributes. However, this may be dangerous default\n// behavior in a server scenario\n\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\n\nif (singleInstance) {\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n} else {\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n}\n\nfunction getServerUrlPath() {\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\n\n  if (serverUrl[serverUrl.length - 1] !== '/') {\n    serverUrl += '/';\n  }\n\n  var url = serverUrl.replace(/https?:\\/\\//, '');\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\n}\n/**\n * Creates a new model with defined attributes.\n *\n * <p>You won't normally call this method directly.  It is recommended that\n * you use a subclass of <code>Parse.Object</code> instead, created by calling\n * <code>extend</code>.</p>\n *\n * <p>However, if you don't want to use a subclass, or aren't sure which\n * subclass is appropriate, you can use this form:<pre>\n *     var object = new Parse.Object(\"ClassName\");\n * </pre>\n * That is basically equivalent to:<pre>\n *     var MyClass = Parse.Object.extend(\"ClassName\");\n *     var object = new MyClass();\n * </pre></p>\n *\n * @alias Parse.Object\n */\n\n\nvar ParseObject = /*#__PURE__*/function () {\n  /**\n   * @param {string} className The class name for the object\n   * @param {object} attributes The initial set of data to store in the object.\n   * @param {object} options The options for this object instance.\n   */\n  function ParseObject(className\n  /*: ?string | { className: string, [attr: string]: mixed }*/\n  , attributes\n  /*:: ?: { [attr: string]: mixed }*/\n  , options\n  /*:: ?: { ignoreValidation: boolean }*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseObject);\n    (0, _defineProperty3.default)(this, \"id\", void 0);\n    (0, _defineProperty3.default)(this, \"_localId\", void 0);\n    (0, _defineProperty3.default)(this, \"_objCount\", void 0);\n    (0, _defineProperty3.default)(this, \"className\", void 0); // Enable legacy initializers\n\n    if (typeof this.initialize === 'function') {\n      this.initialize.apply(this, arguments);\n    }\n\n    var toSet = null;\n    this._objCount = objectCount++;\n\n    if (typeof className === 'string') {\n      this.className = className;\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        toSet = attributes;\n      }\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\n      this.className = className.className;\n      toSet = {};\n\n      for (var _attr in className) {\n        if (_attr !== 'className') {\n          toSet[_attr] = className[_attr];\n        }\n      }\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        options = attributes;\n      }\n    }\n\n    if (toSet && !this.set(toSet, options)) {\n      throw new Error(\"Can't create an invalid Parse Object\");\n    }\n  }\n  /**\n   * The ID of this object, unique within its class.\n   *\n   * @property {string} id\n   */\n\n\n  (0, _createClass2.default)(ParseObject, [{\n    key: \"attributes\",\n    get:\n    /** Prototype getters / setters * */\n    function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\n    }\n    /**\n     * The first time this object was saved on the server.\n     *\n     * @property {Date} createdAt\n     * @returns {Date}\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().createdAt;\n    }\n    /**\n     * The last time this object was updated on the server.\n     *\n     * @property {Date} updatedAt\n     * @returns {Date}\n     */\n\n  }, {\n    key: \"updatedAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().updatedAt;\n    }\n    /** Private methods * */\n\n    /**\n     * Returns a local or server Id used uniquely identify this object\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"_getId\",\n    value: function ()\n    /*: string*/\n    {\n      if (typeof this.id === 'string') {\n        return this.id;\n      }\n\n      if (typeof this._localId === 'string') {\n        return this._localId;\n      }\n\n      var localId = \"local\".concat(uuidv4());\n      this._localId = localId;\n      return localId;\n    }\n    /**\n     * Returns a unique identifier used to pull data from the State Controller.\n     *\n     * @returns {Parse.Object|object}\n     */\n\n  }, {\n    key: \"_getStateIdentifier\",\n    value: function ()\n    /*: ParseObject | { id: string, className: string }*/\n    {\n      if (singleInstance) {\n        var id = this.id;\n\n        if (!id) {\n          id = this._getId();\n        }\n\n        return {\n          id: id,\n          className: this.className\n        };\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getServerData(this._getStateIdentifier());\n    }\n  }, {\n    key: \"_clearServerData\",\n    value: function () {\n      var serverData = this._getServerData();\n\n      var unset = {};\n\n      for (var _attr2 in serverData) {\n        unset[_attr2] = undefined;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.setServerData(this._getStateIdentifier(), unset);\n    }\n  }, {\n    key: \"_getPendingOps\",\n    value: function ()\n    /*: Array<OpsMap>*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getPendingOps(this._getStateIdentifier());\n    }\n    /**\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\n     * these fields will be cleared\n     */\n\n  }, {\n    key: \"_clearPendingOps\",\n    value: function (keysToClear\n    /*:: ?: Array<string>*/\n    ) {\n      var pending = this._getPendingOps();\n\n      var latest = pending[pending.length - 1];\n      var keys = keysToClear || (0, _keys.default)(latest);\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        delete latest[key];\n      });\n    }\n  }, {\n    key: \"_getDirtyObjectAttributes\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var attributes = this.attributes;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\n      var dirty = {};\n\n      for (var _attr3 in attributes) {\n        var val = attributes[_attr3];\n\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n          // Due to the way browsers construct maps, the key order will not change\n          // unless the object is changed\n          try {\n            var json = (0, _encode.default)(val, false, true);\n            var stringified = (0, _stringify.default)(json);\n\n            if (objectCache[_attr3] !== stringified) {\n              dirty[_attr3] = val;\n            }\n          } catch (e) {\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\n            // No matter how it happened, it indicates a change in the attribute\n            dirty[_attr3] = val;\n          }\n        }\n      }\n\n      return dirty;\n    }\n  }, {\n    key: \"_toFullJSON\",\n    value: function (seen\n    /*:: ?: Array<any>*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var json\n      /*: { [key: string]: mixed }*/\n      = this.toJSON(seen, offline);\n      json.__type = 'Object';\n      json.className = this.className;\n      return json;\n    }\n  }, {\n    key: \"_getSaveJSON\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var pending = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      var json = {};\n\n      for (var attr in dirtyObjects) {\n        var isDotNotation = false;\n\n        for (var i = 0; i < pending.length; i += 1) {\n          for (var field in pending[i]) {\n            // Dot notation operations are handled later\n            if ((0, _includes.default)(field).call(field, '.')) {\n              var fieldName = field.split('.')[0];\n\n              if (fieldName === attr) {\n                isDotNotation = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (!isDotNotation) {\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\n        }\n      }\n\n      for (attr in pending[0]) {\n        json[attr] = pending[0][attr].toJSON();\n      }\n\n      return json;\n    }\n  }, {\n    key: \"_getSaveParams\",\n    value: function ()\n    /*: SaveParams*/\n    {\n      var method = this.id ? 'PUT' : 'POST';\n\n      var body = this._getSaveJSON();\n\n      var path = \"classes/\".concat(this.className);\n\n      if (this.id) {\n        path += \"/\".concat(this.id);\n      } else if (this.className === '_User') {\n        path = 'users';\n      }\n\n      return {\n        method: method,\n        body: body,\n        path: path\n      };\n    }\n  }, {\n    key: \"_finishFetch\",\n    value: function (serverData\n    /*: AttributeMap*/\n    ) {\n      if (!this.id && serverData.objectId) {\n        this.id = serverData.objectId;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.initializeState(this._getStateIdentifier());\n      var decoded = {};\n\n      for (var _attr4 in serverData) {\n        if (_attr4 === 'ACL') {\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\n        } else if (_attr4 !== 'objectId') {\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\n\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\n          }\n        }\n      }\n\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\n      }\n\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\n      }\n\n      if (!decoded.updatedAt && decoded.createdAt) {\n        decoded.updatedAt = decoded.createdAt;\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\n    }\n  }, {\n    key: \"_setExisted\",\n    value: function (existed\n    /*: boolean*/\n    ) {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        state.existed = existed;\n      }\n    }\n  }, {\n    key: \"_migrateId\",\n    value: function (serverId\n    /*: string*/\n    ) {\n      if (this._localId && serverId) {\n        if (singleInstance) {\n          var stateController = _CoreManager.default.getObjectStateController();\n\n          var oldState = stateController.removeState(this._getStateIdentifier());\n          this.id = serverId;\n          delete this._localId;\n\n          if (oldState) {\n            stateController.initializeState(this._getStateIdentifier(), oldState);\n          }\n        } else {\n          this.id = serverId;\n          delete this._localId;\n        }\n      }\n    }\n  }, {\n    key: \"_handleSaveResponse\",\n    value: function (response\n    /*: AttributeMap*/\n    , status\n    /*: number*/\n    ) {\n      var changes = {};\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var pending = stateController.popPendingState(this._getStateIdentifier());\n\n      for (var attr in pending) {\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\n        } else if (!(attr in response) && !(0, _includes.default)(attr).call(attr, '.')) {\n          // Only SetOps and UnsetOps should not come back with results\n          changes[attr] = pending[attr].applyTo(undefined);\n        }\n      }\n\n      for (attr in response) {\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\n          changes[attr] = (0, _parseDate.default)(response[attr]);\n        } else if (attr === 'ACL') {\n          changes[attr] = new _ParseACL.default(response[attr]);\n        } else if (attr !== 'objectId') {\n          var val = (0, _decode.default)(response[attr]);\n\n          if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {\n            changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);\n          } else {\n            changes[attr] = val;\n          }\n\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\n            changes[attr] = undefined;\n          }\n        }\n      }\n\n      if (changes.createdAt && !changes.updatedAt) {\n        changes.updatedAt = changes.createdAt;\n      }\n\n      this._migrateId(response.objectId);\n\n      if (status !== 201) {\n        this._setExisted(true);\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\n    }\n  }, {\n    key: \"_handleSaveError\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\n    }\n    /** Public methods * */\n\n  }, {\n    key: \"initialize\",\n    value: function () {// NOOP\n    }\n    /**\n     * Returns a JSON version of the object suitable for saving to Parse.\n     *\n     * @param seen\n     * @param offline\n     * @returns {object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function (seen\n    /*: Array<any> | void*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var _context;\n\n      var seenEntry = this.id ? (0, _concat.default)(_context = \"\".concat(this.className, \":\")).call(_context, this.id) : this;\n      seen = seen || [seenEntry];\n      var json = {};\n      var attrs = this.attributes;\n\n      for (var _attr5 in attrs) {\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\n          json[_attr5] = attrs[_attr5].toJSON();\n        } else {\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);\n        }\n      }\n\n      var pending = this._getPendingOps();\n\n      for (var _attr6 in pending[0]) {\n        json[_attr6] = pending[0][_attr6].toJSON(offline);\n      }\n\n      if (this.id) {\n        json.objectId = this.id;\n      }\n\n      return json;\n    }\n    /**\n     * Determines whether this ParseObject is equal to another ParseObject\n     *\n     * @param {object} other - An other object ot compare\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      }\n\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\n    }\n    /**\n     * Returns true if this object has been modified since its last\n     * save/refresh.  If an attribute is specified, it returns true only if that\n     * particular attribute has been modified since the last save/refresh.\n     *\n     * @param {string} attr An attribute name (optional).\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"dirty\",\n    value: function (attr\n    /*:: ?: string*/\n    )\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return true;\n      }\n\n      var pendingOps = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      if (attr) {\n        if (dirtyObjects.hasOwnProperty(attr)) {\n          return true;\n        }\n\n        for (var i = 0; i < pendingOps.length; i++) {\n          if (pendingOps[i].hasOwnProperty(attr)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\n        return true;\n      }\n\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Returns an array of keys that have been modified since last save/refresh\n     *\n     * @returns {string[]}\n     */\n\n  }, {\n    key: \"dirtyKeys\",\n    value: function ()\n    /*: Array<string>*/\n    {\n      var pendingOps = this._getPendingOps();\n\n      var keys = {};\n\n      for (var i = 0; i < pendingOps.length; i++) {\n        for (var _attr7 in pendingOps[i]) {\n          keys[_attr7] = true;\n        }\n      }\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      for (var _attr8 in dirtyObjects) {\n        keys[_attr8] = true;\n      }\n\n      return (0, _keys.default)(keys);\n    }\n    /**\n     * Returns true if the object has been fetched.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isDataAvailable\",\n    value: function ()\n    /*: boolean*/\n    {\n      var serverData = this._getServerData();\n\n      return !!(0, _keys.default)(serverData).length;\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n\n  }, {\n    key: \"toPointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this.id) {\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\n      }\n\n      return {\n        __type: 'Pointer',\n        className: this.className,\n        objectId: this.id\n      };\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n\n  }, {\n    key: \"toOfflinePointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this._localId) {\n        throw new Error('Cannot create a offline pointer to a saved ParseObject');\n      }\n\n      return {\n        __type: 'Object',\n        className: this.className,\n        _localId: this._localId\n      };\n    }\n    /**\n     * Gets the value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {*}\n     */\n\n  }, {\n    key: \"get\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: mixed*/\n    {\n      return this.attributes[attr];\n    }\n    /**\n     * Gets a relation on the given class for the attribute.\n     *\n     * @param {string} attr The attribute to get the relation for.\n     * @returns {Parse.Relation}\n     */\n\n  }, {\n    key: \"relation\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ParseRelation*/\n    {\n      var value = this.get(attr);\n\n      if (value) {\n        if (!(value instanceof _ParseRelation.default)) {\n          throw new Error(\"Called relation() on non-relation field \".concat(attr));\n        }\n\n        value._ensureParentAndKey(this, attr);\n\n        return value;\n      }\n\n      return new _ParseRelation.default(this, attr);\n    }\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {string}\n     */\n\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var val = this.attributes[attr];\n\n      if (val == null) {\n        return '';\n      }\n\n      if (typeof val !== 'string') {\n        if (typeof val.toString !== 'function') {\n          return '';\n        }\n\n        val = val.toString();\n      }\n\n      return (0, _escape2.default)(val);\n    }\n    /**\n     * Returns <code>true</code> if the attribute contains a value that is not\n     * null or undefined.\n     *\n     * @param {string} attr The string name of the attribute.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"has\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: boolean*/\n    {\n      var attributes = this.attributes;\n\n      if (attributes.hasOwnProperty(attr)) {\n        return attributes[attr] != null;\n      }\n\n      return false;\n    }\n    /**\n     * Sets a hash of model attributes on the object.\n     *\n     * <p>You can call it with an object containing keys and values, with one\n     * key and value, or dot notation.  For example:<pre>\n     *   gameTurn.set({\n     *     player: player1,\n     *     diceRoll: 2\n     *   }, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"currentPlayer\", player2, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"finished\", true);</pre></p>\n     *\n     *   game.set(\"player.score\", 10);</pre></p>\n     *\n     * @param {(string|object)} key The key to set.\n     * @param {(string|object)} value The value to give it.\n     * @param {object} options A set of options for the set.\n     *     The only supported option is <code>error</code>.\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\n     */\n\n  }, {\n    key: \"set\",\n    value: function (key\n    /*: mixed*/\n    , value\n    /*: mixed*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      var changes = {};\n      var newOps = {};\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        changes = key;\n        options = value;\n      } else if (typeof key === 'string') {\n        changes[key] = value;\n      } else {\n        return this;\n      }\n\n      options = options || {};\n      var readonly = [];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var k in changes) {\n        if (k === 'createdAt' || k === 'updatedAt') {\n          // This property is read-only, but for legacy reasons we silently\n          // ignore it\n          continue;\n        }\n\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\n          throw new Error(\"Cannot modify readonly attribute: \".concat(k));\n        }\n\n        if (options.unset) {\n          newOps[k] = new _ParseOp.UnsetOp();\n        } else if (changes[k] instanceof _ParseOp.Op) {\n          newOps[k] = changes[k];\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\n        } else if (k === 'objectId' || k === 'id') {\n          if (typeof changes[k] === 'string') {\n            this.id = changes[k];\n          }\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\n        } else if (changes[k] instanceof _ParseRelation.default) {\n          var relation = new _ParseRelation.default(this, k);\n          relation.targetClassName = changes[k].targetClassName;\n          newOps[k] = new _ParseOp.SetOp(relation);\n        } else {\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\n        }\n      }\n\n      var currentAttributes = this.attributes; // Only set nested fields if exists\n\n      var serverData = this._getServerData();\n\n      if (typeof key === 'string' && (0, _includes.default)(key).call(key, '.')) {\n        var field = key.split('.')[0];\n\n        if (!serverData[field]) {\n          return this;\n        }\n      } // Calculate new values\n\n\n      var newValues = {};\n\n      for (var _attr9 in newOps) {\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\n        }\n      } // Validate changes\n\n\n      if (!options.ignoreValidation) {\n        var validation = this.validate(newValues);\n\n        if (validation) {\n          if (typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n\n          return false;\n        }\n      } // Consolidate Ops\n\n\n      var pendingOps = this._getPendingOps();\n\n      var last = pendingOps.length - 1;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      for (var _attr10 in newOps) {\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\n\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\n      }\n\n      return this;\n    }\n    /**\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\n     * exist.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @param options\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"unset\",\n    value: function (attr\n    /*: string*/\n    , options\n    /*:: ?: { [opt: string]: mixed }*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      options = options || {};\n      options.unset = true;\n      return this.set(attr, null, options);\n    }\n    /**\n     * Atomically increments the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to increment by (optional).\n     * @returns {(ParseObject|boolean)}\n     */\n\n  }, {\n    key: \"increment\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot increment by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\n    }\n    /**\n     * Atomically decrements the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to decrement by (optional).\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"decrement\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot decrement by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount * -1));\n    }\n    /**\n     * Atomically add an object to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The item to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"add\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp([item]));\n    }\n    /**\n     * Atomically add the objects to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The items to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp(items));\n    }\n    /**\n     * Atomically add an object to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addUnique\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\n    }\n    /**\n     * Atomically add the objects to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The objects to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addAllUnique\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\n    }\n    /**\n     * Atomically remove all instances of an object from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\n    }\n    /**\n     * Atomically remove all instances of the objects from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp(items));\n    }\n    /**\n     * Returns an instance of a subclass of Parse.Op describing what kind of\n     * modification has been performed on this field since the last time it was\n     * saved. For example, after calling object.increment(\"x\"), calling\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\n     *\n     * @param attr {String} The key.\n     * @returns {Parse.Op} The operation, or undefined if none.\n     */\n\n  }, {\n    key: \"op\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ?Op*/\n    {\n      var pending = this._getPendingOps();\n\n      for (var i = pending.length; i--;) {\n        if (pending[i][attr]) {\n          return pending[i][attr];\n        }\n      }\n    }\n    /**\n     * Creates a new model with identical attributes to this one.\n     *\n     * @returns {Parse.Object}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone()\n    /*: any*/\n    {\n      var clone = new this.constructor();\n\n      if (!clone.className) {\n        clone.className = this.className;\n      }\n\n      var attributes = this.attributes;\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        var readonly = this.constructor.readOnlyAttributes() || []; // Attributes are frozen, so we have to rebuild an object,\n        // rather than delete readonly keys\n\n        var copy = {};\n\n        for (var a in attributes) {\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\n            copy[a] = attributes[a];\n          }\n        }\n\n        attributes = copy;\n      }\n\n      if (clone.set) {\n        clone.set(attributes);\n      }\n\n      return clone;\n    }\n    /**\n     * Creates a new instance of this object. Not to be confused with clone()\n     *\n     * @returns {Parse.Object}\n     */\n\n  }, {\n    key: \"newInstance\",\n    value: function ()\n    /*: any*/\n    {\n      var clone = new this.constructor();\n\n      if (!clone.className) {\n        clone.className = this.className;\n      }\n\n      clone.id = this.id;\n\n      if (singleInstance) {\n        // Just return an object with the right id\n        return clone;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      if (stateController) {\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\n      }\n\n      return clone;\n    }\n    /**\n     * Returns true if this object has never been saved to Parse.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNew\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.id;\n    }\n    /**\n     * Returns true if this object was created by the Parse server when the\n     * object might have already been there (e.g. in the case of a Facebook\n     * login)\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"existed\",\n    value: function ()\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return false;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        return state.existed;\n      }\n\n      return false;\n    }\n    /**\n     * Returns true if this object exists on the Server\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object exists.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function () {\n      var _exists = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options\n      /*:: ?: RequestOptions*/\n      ) {\n        var query;\n        return _regenerator.default.wrap(function (_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.id) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 2:\n                _context2.prev = 2;\n                query = new _ParseQuery.default(this.className);\n                _context2.next = 6;\n                return query.get(this.id, options);\n\n              case 6:\n                return _context2.abrupt(\"return\", true);\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](2);\n\n                if (!(_context2.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 13:\n                throw _context2.t0;\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n\n      return function () {\n        return _exists.apply(this, arguments);\n      };\n    }()\n    /**\n     * Checks if the model is currently in a valid state.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.validate(this.attributes);\n    }\n    /**\n     * You should not call this function directly unless you subclass\n     * <code>Parse.Object</code>, in which case you can override this method\n     * to provide additional validation on <code>set</code> and\n     * <code>save</code>.  Your implementation should return\n     *\n     * @param {object} attrs The current data to validate.\n     * @returns {Parse.Error|boolean} False if the data is valid.  An error object otherwise.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    )\n    /*: ParseError | boolean*/\n    {\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\n      }\n\n      for (var _key in attrs) {\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Returns the ACL for this object.\n     *\n     * @returns {Parse.ACL} An instance of Parse.ACL.\n     * @see Parse.Object#get\n     */\n\n  }, {\n    key: \"getACL\",\n    value: function ()\n    /*: ?ParseACL*/\n    {\n      var acl = this.get('ACL');\n\n      if (acl instanceof _ParseACL.default) {\n        return acl;\n      }\n\n      return null;\n    }\n    /**\n     * Sets the ACL to be used for this object.\n     *\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\n     * @param {object} options\n     * @returns {(ParseObject | boolean)} Whether the set passed validation.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"setACL\",\n    value: function (acl\n    /*: ParseACL*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('ACL', acl, options);\n    }\n    /**\n     * Clears any (or specific) changes to this object made since the last call to save()\n     *\n     * @param {string} [keys] - specify which fields to revert\n     */\n\n  }, {\n    key: \"revert\",\n    value: function ()\n    /*: void*/\n    {\n      var keysToRevert;\n\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n\n      if (keys.length) {\n        keysToRevert = [];\n\n        var _iterator = _createForOfIteratorHelper(keys),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _key3 = _step.value;\n\n            if (typeof _key3 === 'string') {\n              keysToRevert.push(_key3);\n            } else {\n              throw new Error('Parse.Object#revert expects either no, or a list of string, arguments.');\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      this._clearPendingOps(keysToRevert);\n    }\n    /**\n     * Clears all attributes on a model\n     *\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function ()\n    /*: ParseObject | boolean*/\n    {\n      var attributes = this.attributes;\n      var erasable = {};\n      var readonly = ['createdAt', 'updatedAt'];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var _attr11 in attributes) {\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\n          erasable[_attr11] = true;\n        }\n      }\n\n      return this.set(erasable, {\n        unset: true\n      });\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var fetchOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        fetchOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        fetchOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        fetchOptions.context = options.context;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        fetchOptions.include = [];\n\n        if ((0, _isArray.default)(options.include)) {\n          var _context3;\n\n          (0, _forEach.default)(_context3 = options.include).call(_context3, function (key) {\n            if ((0, _isArray.default)(key)) {\n              var _context4;\n\n              fetchOptions.include = (0, _concat.default)(_context4 = fetchOptions.include).call(_context4, key);\n            } else {\n              fetchOptions.include.push(key);\n            }\n          });\n        } else {\n          fetchOptions.include.push(options.include);\n        }\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      return controller.fetch(this, true, fetchOptions);\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function (keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      options.include = keys;\n      return this.fetch(options);\n    }\n    /**\n     * Set a hash of model attributes, and save the model to the server.\n     * updatedAt will be updated when the request returns.\n     * You can either call it as:<pre>\n     * object.save();</pre>\n     * or<pre>\n     * object.save(attrs);</pre>\n     * or<pre>\n     * object.save(null, options);</pre>\n     * or<pre>\n     * object.save(attrs, options);</pre>\n     * or<pre>\n     * object.save(key, value, options);</pre>\n     *\n     * For example, <pre>\n     * gameTurn.save({\n     * player: \"Jake Cutter\",\n     * diceRoll: 2\n     * }).then(function(gameTurnAgain) {\n     * // The save was successful.\n     * }, function(error) {\n     * // The save failed.  Error is an instance of Parse.Error.\n     * });</pre>\n     *\n     * @param {string | object | null} [arg1]\n     * Valid options are:<ul>\n     * <li>`Object` - Key/value pairs to update on the object.</li>\n     * <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\n     * <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\n     * </ul>\n     * @param {string | object} [arg2]\n     * <ul>\n     * <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\n     * <li>`Object` Options - Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * </li>\n     * </ul>\n     * @param {object} [arg3]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the save\n     * completes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (arg1\n    /*: ?string | { [attr: string]: mixed }*/\n    , arg2\n    /*: SaveOptions | mixed*/\n    , arg3\n    /*:: ?: SaveOptions*/\n    )\n    /*: Promise*/\n    {\n      var _this = this;\n\n      var attrs;\n      var options;\n\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\n        attrs = arg1;\n\n        if ((0, _typeof2.default)(arg2) === 'object') {\n          options = arg2;\n        }\n      } else {\n        attrs = {};\n        attrs[arg1] = arg2;\n        options = arg3;\n      }\n\n      if (attrs) {\n        var validation = this.validate(attrs);\n\n        if (validation) {\n          return _promise.default.reject(validation);\n        }\n\n        this.set(attrs, options);\n      }\n\n      options = options || {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = !!options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\n        saveOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\n      return controller.save(unsaved, saveOptions).then(function () {\n        return controller.save(_this, saveOptions);\n      });\n    }\n    /**\n     * Destroy this model on the server if it was already persisted.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      if (!this.id) {\n        return _promise.default.resolve();\n      }\n\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\n    }\n    /**\n     * Asynchronously stores the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pin();\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await object.unPin();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously returns if the object is pinned\n     *\n     * <pre>\n     * const isPinned = await object.isPinned();\n     * </pre>\n     *\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\n     */\n\n  }, {\n    key: \"isPinned\",\n    value: function () {\n      var _isPinned = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var localDatastore, objectKey, pin;\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context5.next = 6;\n                return localDatastore.fromPinWithName(objectKey);\n\n              case 6:\n                pin = _context5.sent;\n                return _context5.abrupt(\"return\", pin.length > 0);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _isPinned.apply(this, arguments);\n      };\n    }()\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pinWithName(name);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\n     *\n     * <pre>\n     * await object.unPinWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously loads data from the local datastore into this object.\n     *\n     * <pre>\n     * await object.fetchFromLocalDatastore();\n     * </pre>\n     *\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\n     *\n     * @returns {Promise} A promise that is fulfilled when the fetch completes.\n     */\n\n  }, {\n    key: \"fetchFromLocalDatastore\",\n    value: function () {\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var localDatastore, objectKey, pinned, result;\n        return _regenerator.default.wrap(function (_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                throw new Error('Parse.enableLocalDatastore() must be called first');\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context6.next = 6;\n                return localDatastore._serializeObject(objectKey);\n\n              case 6:\n                pinned = _context6.sent;\n\n                if (pinned) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                throw new Error('Cannot fetch an unsaved ParseObject');\n\n              case 9:\n                result = ParseObject.fromJSON(pinned);\n\n                this._finishFetch(result.toJSON());\n\n                return _context6.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _fetchFromLocalDatastore.apply(this, arguments);\n      };\n    }()\n    /** Static methods * */\n\n  }], [{\n    key: \"_clearAllState\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.clearAllState();\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAll([object1, object2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAll(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllIfNeededWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAllIfNeeded(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\n     *    .then((list) => {\n     *      // Objects were fetched and updated.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllIfNeeded\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , options) {\n      options = options || {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\n    }\n  }, {\n    key: \"handleIncludeOptions\",\n    value: function (options) {\n      var include = [];\n\n      if ((0, _isArray.default)(options.include)) {\n        var _context7;\n\n        (0, _forEach.default)(_context7 = options.include).call(_context7, function (key) {\n          if ((0, _isArray.default)(key)) {\n            include = (0, _concat.default)(include).call(include, key);\n          } else {\n            include.push(key);\n          }\n        });\n      } else {\n        include.push(options.include);\n      }\n\n      return include;\n    }\n    /**\n     * Destroy the given list of models on the server if it was already persisted.\n     *\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\n     * this method will continue trying to delete the rest of the models if\n     * possible, except in the case of a fatal error like a connection error.\n     *\n     * <p>In particular, the Parse.Error object returned in the case of error may\n     * be one of two types:\n     *\n     * <ul>\n     * <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n     * array of other Parse.Error objects. Each error object in this array\n     * has an \"object\" property that references the object that could not be\n     * deleted (for instance, because that object could not be found).</li>\n     * <li>A non-aggregate Parse.Error. This indicates a serious error that\n     * caused the delete operation to be aborted partway through (for\n     * instance, a connection failure in the middle of the delete).</li>\n     * </ul>\n     *\n     * <pre>\n     * Parse.Object.destroyAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were deleted.\n     * }, (error) => {\n     * // An error occurred while deleting one or more of the objects.\n     * // If this is an aggregate error, then we can inspect each error\n     * // object individually to determine the reason why a particular\n     * // object was not deleted.\n     * if (error.code === Parse.Error.AGGREGATE_ERROR) {\n     * for (var i = 0; i < error.errors.length; i++) {\n     * console.log(\"Couldn't delete \" + error.errors[i].object.id +\n     * \"due to \" + error.errors[i].message);\n     * }\n     * } else {\n     * console.log(\"Delete aborted because of \" + error.message);\n     * }\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled when the destroyAll\n     * completes.\n     */\n\n  }, {\n    key: \"destroyAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        destroyOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\n    }\n    /**\n     * Saves the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     * Parse.Object.saveAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were saved.\n     * }, (error) => {\n     * // An error occurred while saving one of the objects.\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"saveAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        saveOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\n    }\n    /**\n     * Creates a reference to a subclass of Parse.Object with the given id. This\n     * does not exist on Parse.Object, only on subclasses.\n     *\n     * <p>A shortcut for: <pre>\n     *  var Foo = Parse.Object.extend(\"Foo\");\n     *  var pointerToFoo = new Foo();\n     *  pointerToFoo.id = \"myObjectId\";\n     * </pre>\n     *\n     * @param {string} id The ID of the object to create a reference to.\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference.\n     */\n\n  }, {\n    key: \"createWithoutData\",\n    value: function (id\n    /*: string*/\n    ) {\n      var obj = new this();\n      obj.id = id;\n      return obj;\n    }\n    /**\n     * Creates a new instance of a Parse Object from a JSON representation.\n     *\n     * @param {object} json The JSON map of the Object's data\n     * @param {boolean} override In single instance mode, all old server data\n     *   is overwritten if this is set to true\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function (json\n    /*: any*/\n    , override\n    /*:: ?: boolean*/\n    ) {\n      if (!json.className) {\n        throw new Error('Cannot create an object without a className');\n      }\n\n      var constructor = classMap[json.className];\n      var o = constructor ? new constructor() : new ParseObject(json.className);\n      var otherAttributes = {};\n\n      for (var _attr12 in json) {\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\n          otherAttributes[_attr12] = json[_attr12];\n        }\n      }\n\n      if (override) {\n        // id needs to be set before clearServerData can work\n        if (otherAttributes.objectId) {\n          o.id = otherAttributes.objectId;\n        }\n\n        var preserved = null;\n\n        if (typeof o._preserveFieldsOnFetch === 'function') {\n          preserved = o._preserveFieldsOnFetch();\n        }\n\n        o._clearServerData();\n\n        if (preserved) {\n          o._finishFetch(preserved);\n        }\n      }\n\n      o._finishFetch(otherAttributes);\n\n      if (json.objectId) {\n        o._setExisted(true);\n      }\n\n      return o;\n    }\n    /**\n     * Registers a subclass of Parse.Object with a specific class name.\n     * When objects of that class are retrieved from a query, they will be\n     * instantiated with this subclass.\n     * This is only necessary when using ES6 subclassing.\n     *\n     * @param {string} className The class name of the subclass\n     * @param {Function} constructor The subclass\n     */\n\n  }, {\n    key: \"registerSubclass\",\n    value: function (className\n    /*: string*/\n    , constructor\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n\n      if (typeof constructor === 'undefined') {\n        throw new TypeError('You must supply a subclass constructor.');\n      }\n\n      if (typeof constructor !== 'function') {\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\n      }\n\n      classMap[className] = constructor;\n\n      if (!constructor.className) {\n        constructor.className = className;\n      }\n    }\n    /**\n     * Creates a new subclass of Parse.Object for the given Parse class name.\n     *\n     * <p>Every extension of a Parse class will inherit from the most recent\n     * previous extension of that class. When a Parse.Object is automatically\n     * created by parsing JSON, it will use the most recent extension of that\n     * class.</p>\n     *\n     * <p>You should call either:<pre>\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre>\n     * or, for Backbone compatibility:<pre>\n     *     var MyClass = Parse.Object.extend({\n     *         className: \"MyClass\",\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre></p>\n     *\n     * @param {string} className The name of the Parse class backing this model.\n     * @param {object} protoProps Instance properties to add to instances of the\n     *     class returned from this method.\n     * @param {object} classProps Class properties to add the class returned from\n     *     this method.\n     * @returns {Parse.Object} A new subclass of Parse.Object.\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (className\n    /*: any*/\n    , protoProps\n    /*: any*/\n    , classProps\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        if (className && typeof className.className === 'string') {\n          return ParseObject.extend(className.className, className, protoProps);\n        }\n\n        throw new Error(\"Parse.Object.extend's first argument should be the className.\");\n      }\n\n      var adjustedClassName = className;\n\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        adjustedClassName = '_User';\n      }\n\n      var parentProto = ParseObject.prototype;\n\n      if (this.hasOwnProperty('__super__') && this.__super__) {\n        parentProto = this.prototype;\n      } else if (classMap[adjustedClassName]) {\n        parentProto = classMap[adjustedClassName].prototype;\n      }\n\n      var ParseObjectSubclass = function (attributes, options) {\n        this.className = adjustedClassName;\n        this._objCount = objectCount++; // Enable legacy initializers\n\n        if (typeof this.initialize === 'function') {\n          this.initialize.apply(this, arguments);\n        }\n\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n          if (!this.set(attributes || {}, options)) {\n            throw new Error(\"Can't create an invalid Parse Object\");\n          }\n        }\n      };\n\n      ParseObjectSubclass.className = adjustedClassName;\n      ParseObjectSubclass.__super__ = parentProto;\n      ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\n        constructor: {\n          value: ParseObjectSubclass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n\n      if (protoProps) {\n        for (var prop in protoProps) {\n          if (prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass.prototype, prop, {\n              value: protoProps[prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop in classProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass, _prop, {\n              value: classProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      ParseObjectSubclass.extend = function (name, protoProps, classProps) {\n        if (typeof name === 'string') {\n          return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\n        }\n\n        return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\n      };\n\n      ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\n      classMap[adjustedClassName] = ParseObjectSubclass;\n      return ParseObjectSubclass;\n    }\n    /**\n     * Enable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * This is disabled by default in server environments, since it can lead to\n     * security issues.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableSingleInstance\",\n    value: function () {\n      singleInstance = true;\n\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n    }\n    /**\n     * Disable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * When disabled, you can have two instances of the same object in memory\n     * without them sharing attributes.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableSingleInstance\",\n    value: function () {\n      singleInstance = false;\n\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAll([...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handlePinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAll([...]);\n     * </pre>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handleUnPinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjects();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjects\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Asynchronously removes all objects with the specified pin name.\n     * Deletes the pin name also.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjectsWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjectsWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\n    }\n  }]);\n  return ParseObject;\n}();\n\nvar DefaultController = {\n  fetch: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , forceFetch\n  /*: boolean*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var objs = [];\n      var ids = [];\n      var className = null;\n      var results = [];\n      var error = null;\n      (0, _forEach.default)(target).call(target, function (el) {\n        if (error) {\n          return;\n        }\n\n        if (!className) {\n          // eslint-disable-next-line prefer-destructuring\n          className = el.className;\n        }\n\n        if (className !== el.className) {\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\n        }\n\n        if (!el.id) {\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\n        }\n\n        if (forceFetch || !el.isDataAvailable()) {\n          ids.push(el.id);\n          objs.push(el);\n        }\n\n        results.push(el);\n      });\n\n      if (error) {\n        return _promise.default.reject(error);\n      }\n\n      var query = new _ParseQuery.default(className);\n      query.containedIn('objectId', ids);\n\n      if (options && options.include) {\n        query.include(options.include);\n      }\n\n      query._limit = ids.length;\n      return (0, _find.default)(query).call(query, options).then( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(objects) {\n          var idMap, i, obj, _i, _obj, id, _iterator2, _step2, object;\n\n          return _regenerator.default.wrap(function (_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  idMap = {};\n                  (0, _forEach.default)(objects).call(objects, function (o) {\n                    idMap[o.id] = o;\n                  });\n                  i = 0;\n\n                case 3:\n                  if (!(i < objs.length)) {\n                    _context8.next = 11;\n                    break;\n                  }\n\n                  obj = objs[i];\n\n                  if (!(!obj || !obj.id || !idMap[obj.id])) {\n                    _context8.next = 8;\n                    break;\n                  }\n\n                  if (!forceFetch) {\n                    _context8.next = 8;\n                    break;\n                  }\n\n                  return _context8.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\n\n                case 8:\n                  i++;\n                  _context8.next = 3;\n                  break;\n\n                case 11:\n                  if (!singleInstance) {\n                    // If single instance objects are disabled, we need to replace the\n                    for (_i = 0; _i < results.length; _i++) {\n                      _obj = results[_i];\n\n                      if (_obj && _obj.id && idMap[_obj.id]) {\n                        id = _obj.id;\n\n                        _obj._finishFetch(idMap[id].toJSON());\n\n                        results[_i] = idMap[id];\n                      }\n                    }\n                  }\n\n                  _iterator2 = _createForOfIteratorHelper(results);\n                  _context8.prev = 13;\n\n                  _iterator2.s();\n\n                case 15:\n                  if ((_step2 = _iterator2.n()).done) {\n                    _context8.next = 21;\n                    break;\n                  }\n\n                  object = _step2.value;\n                  _context8.next = 19;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 19:\n                  _context8.next = 15;\n                  break;\n\n                case 21:\n                  _context8.next = 26;\n                  break;\n\n                case 23:\n                  _context8.prev = 23;\n                  _context8.t0 = _context8[\"catch\"](13);\n\n                  _iterator2.e(_context8.t0);\n\n                case 26:\n                  _context8.prev = 26;\n\n                  _iterator2.f();\n\n                  return _context8.finish(26);\n\n                case 29:\n                  return _context8.abrupt(\"return\", _promise.default.resolve(results));\n\n                case 30:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee4, null, [[13, 23, 26, 29]]);\n        }));\n\n        return function () {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    if (target instanceof ParseObject) {\n      var _context9;\n\n      if (!target.id) {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'Object does not have an ID'));\n      }\n\n      var RESTController = _CoreManager.default.getRESTController();\n\n      var params = {};\n\n      if (options && options.include) {\n        params.include = options.include.join();\n      }\n\n      return RESTController.request('GET', (0, _concat.default)(_context9 = \"classes/\".concat(target.className, \"/\")).call(_context9, target._getId()), params, options).then( /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(response) {\n          return _regenerator.default.wrap(function (_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  target._clearPendingOps();\n\n                  target._clearServerData();\n\n                  target._finishFetch(response);\n\n                  _context10.next = 5;\n                  return localDatastore._updateObjectIfPinned(target);\n\n                case 5:\n                  return _context10.abrupt(\"return\", target);\n\n                case 6:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function () {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n\n    return _promise.default.resolve();\n  },\n  destroy: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors, _context14;\n\n      return _regenerator.default.wrap(function (_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              RESTController = _CoreManager.default.getRESTController();\n\n              if (!(0, _isArray.default)(target)) {\n                _context16.next = 13;\n                break;\n              }\n\n              if (!(target.length < 1)) {\n                _context16.next = 6;\n                break;\n              }\n\n              return _context16.abrupt(\"return\", _promise.default.resolve([]));\n\n            case 6:\n              batches = [[]];\n              (0, _forEach.default)(target).call(target, function (obj) {\n                if (!obj.id) {\n                  return;\n                }\n\n                batches[batches.length - 1].push(obj);\n\n                if (batches[batches.length - 1].length >= batchSize) {\n                  batches.push([]);\n                }\n              });\n\n              if (batches[batches.length - 1].length === 0) {\n                // If the last batch is empty, remove it\n                batches.pop();\n              }\n\n              deleteCompleted = _promise.default.resolve();\n              errors = [];\n              (0, _forEach.default)(batches).call(batches, function (batch) {\n                deleteCompleted = deleteCompleted.then(function () {\n                  return RESTController.request('POST', 'batch', {\n                    requests: (0, _map.default)(batch).call(batch, function (obj) {\n                      var _context11, _context12;\n\n                      return {\n                        method: 'DELETE',\n                        path: (0, _concat.default)(_context11 = (0, _concat.default)(_context12 = \"\".concat(getServerUrlPath(), \"classes/\")).call(_context12, obj.className, \"/\")).call(_context11, obj._getId()),\n                        body: {}\n                      };\n                    })\n                  }, options).then(function (results) {\n                    for (var i = 0; i < results.length; i++) {\n                      if (results[i] && results[i].hasOwnProperty('error')) {\n                        var err = new _ParseError.default(results[i].error.code, results[i].error.error);\n                        err.object = batch[i];\n                        errors.push(err);\n                      }\n                    }\n                  });\n                });\n              });\n              return _context16.abrupt(\"return\", deleteCompleted.then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n                var aggregate, _iterator3, _step3, object;\n\n                return _regenerator.default.wrap(function (_context13) {\n                  while (1) {\n                    switch (_context13.prev = _context13.next) {\n                      case 0:\n                        if (!errors.length) {\n                          _context13.next = 4;\n                          break;\n                        }\n\n                        aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\n                        aggregate.errors = errors;\n                        return _context13.abrupt(\"return\", _promise.default.reject(aggregate));\n\n                      case 4:\n                        _iterator3 = _createForOfIteratorHelper(target);\n                        _context13.prev = 5;\n\n                        _iterator3.s();\n\n                      case 7:\n                        if ((_step3 = _iterator3.n()).done) {\n                          _context13.next = 13;\n                          break;\n                        }\n\n                        object = _step3.value;\n                        _context13.next = 11;\n                        return localDatastore._destroyObjectIfPinned(object);\n\n                      case 11:\n                        _context13.next = 7;\n                        break;\n\n                      case 13:\n                        _context13.next = 18;\n                        break;\n\n                      case 15:\n                        _context13.prev = 15;\n                        _context13.t0 = _context13[\"catch\"](5);\n\n                        _iterator3.e(_context13.t0);\n\n                      case 18:\n                        _context13.prev = 18;\n\n                        _iterator3.f();\n\n                        return _context13.finish(18);\n\n                      case 21:\n                        return _context13.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 22:\n                      case \"end\":\n                        return _context13.stop();\n                    }\n                  }\n                }, _callee6, null, [[5, 15, 18, 21]]);\n              }))));\n\n            case 13:\n              if (!(target instanceof ParseObject)) {\n                _context16.next = 15;\n                break;\n              }\n\n              return _context16.abrupt(\"return\", RESTController.request('DELETE', (0, _concat.default)(_context14 = \"classes/\".concat(target.className, \"/\")).call(_context14, target._getId()), {}, options).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {\n                return _regenerator.default.wrap(function (_context15) {\n                  while (1) {\n                    switch (_context15.prev = _context15.next) {\n                      case 0:\n                        _context15.next = 2;\n                        return localDatastore._destroyObjectIfPinned(target);\n\n                      case 2:\n                        return _context15.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 3:\n                      case \"end\":\n                        return _context15.stop();\n                    }\n                  }\n                }, _callee7);\n              }))));\n\n            case 15:\n              return _context16.abrupt(\"return\", _promise.default.resolve(target));\n\n            case 16:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee8);\n    }))();\n  },\n  save: function (target\n  /*: ParseObject | Array<ParseObject | ParseFile>*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    var mapIdForPin = {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    options = options || {};\n    options.returnStatus = options.returnStatus || true;\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var unsaved = (0, _concat.default)(target).call(target);\n\n      for (var i = 0; i < target.length; i++) {\n        if (target[i] instanceof ParseObject) {\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\n        }\n      }\n\n      unsaved = (0, _unique.default)(unsaved);\n      var filesSaved\n      /*: Array<ParseFile>*/\n      = [];\n      var pending\n      /*: Array<ParseObject>*/\n      = [];\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\n        if (el instanceof _ParseFile.default) {\n          filesSaved.push(el.save(options));\n        } else if (el instanceof ParseObject) {\n          pending.push(el);\n        }\n      });\n      return _promise.default.all(filesSaved).then(function () {\n        var objectError = null;\n        return (0, _promiseUtils.continueWhile)(function () {\n          return pending.length > 0;\n        }, function () {\n          var batch = [];\n          var nextPending = [];\n          (0, _forEach.default)(pending).call(pending, function (el) {\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\n              batch.push(el);\n            } else {\n              nextPending.push(el);\n            }\n          });\n          pending = nextPending;\n\n          if (batch.length < 1) {\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\n          } // Queue up tasks for each object in the batch.\n          // When every task is ready, the API request will execute\n\n\n          var batchReturned = new _promiseUtils.resolvingPromise();\n          var batchReady = [];\n          var batchTasks = [];\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\n            var ready = new _promiseUtils.resolvingPromise();\n            batchReady.push(ready);\n            stateController.pushPendingState(obj._getStateIdentifier());\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function () {\n              ready.resolve();\n              return batchReturned.then(function (responses) {\n                if (responses[index].hasOwnProperty('success')) {\n                  var objectId = responses[index].success.objectId;\n                  var status = responses[index]._status;\n                  delete responses[index]._status;\n                  mapIdForPin[objectId] = obj._localId;\n\n                  obj._handleSaveResponse(responses[index].success, status);\n                } else {\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\n                    var serverError = responses[index].error;\n                    objectError = new _ParseError.default(serverError.code, serverError.error); // Cancel the rest of the save\n\n                    pending = [];\n                  }\n\n                  obj._handleSaveError();\n                }\n              });\n            }));\n          });\n          (0, _promiseUtils.when)(batchReady).then(function () {\n            // Kick off the batch request\n            return RESTController.request('POST', 'batch', {\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\n                var params = obj._getSaveParams();\n\n                params.path = getServerUrlPath() + params.path;\n                return params;\n              })\n            }, options);\n          }).then(batchReturned.resolve, function (error) {\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\n          });\n          return (0, _promiseUtils.when)(batchTasks);\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {\n          var _iterator4, _step4, object;\n\n          return _regenerator.default.wrap(function (_context17) {\n            while (1) {\n              switch (_context17.prev = _context17.next) {\n                case 0:\n                  if (!objectError) {\n                    _context17.next = 2;\n                    break;\n                  }\n\n                  return _context17.abrupt(\"return\", _promise.default.reject(objectError));\n\n                case 2:\n                  _iterator4 = _createForOfIteratorHelper(target);\n                  _context17.prev = 3;\n\n                  _iterator4.s();\n\n                case 5:\n                  if ((_step4 = _iterator4.n()).done) {\n                    _context17.next = 13;\n                    break;\n                  }\n\n                  object = _step4.value;\n                  _context17.next = 9;\n                  return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\n\n                case 9:\n                  _context17.next = 11;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 11:\n                  _context17.next = 5;\n                  break;\n\n                case 13:\n                  _context17.next = 18;\n                  break;\n\n                case 15:\n                  _context17.prev = 15;\n                  _context17.t0 = _context17[\"catch\"](3);\n\n                  _iterator4.e(_context17.t0);\n\n                case 18:\n                  _context17.prev = 18;\n\n                  _iterator4.f();\n\n                  return _context17.finish(18);\n\n                case 21:\n                  return _context17.abrupt(\"return\", _promise.default.resolve(target));\n\n                case 22:\n                case \"end\":\n                  return _context17.stop();\n              }\n            }\n          }, _callee9, null, [[3, 15, 18, 21]]);\n        })));\n      });\n    }\n\n    if (target instanceof ParseObject) {\n      // generate _localId in case if cascadeSave=false\n      target._getId();\n\n      var localId = target._localId; // copying target lets Flow guarantee the pointer isn't modified elsewhere\n\n      var targetCopy = target;\n\n      var task = function () {\n        var params = targetCopy._getSaveParams();\n\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\n          var status = response._status;\n          delete response._status;\n\n          targetCopy._handleSaveResponse(response, status);\n        }, function (error) {\n          targetCopy._handleSaveError();\n\n          return _promise.default.reject(error);\n        });\n      };\n\n      stateController.pushPendingState(target._getStateIdentifier());\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {\n        return _regenerator.default.wrap(function (_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return localDatastore._updateLocalIdForObject(localId, target);\n\n              case 2:\n                _context18.next = 4;\n                return localDatastore._updateObjectIfPinned(target);\n\n              case 4:\n                return _context18.abrupt(\"return\", target);\n\n              case 5:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee10);\n      })), function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n\n    return _promise.default.resolve();\n  }\n};\n\n_CoreManager.default.setObjectController(DefaultController);\n\nvar _default = ParseObject;\nexports.default = _default;","map":{"version":3,"names":["_interopRequireDefault","require","_typeof3","_WeakMap","_Array$isArray2","_getIteratorMethod","_Symbol","_Array$from","_sliceInstanceProperty","_Object$defineProperty2","_Object$defineProperties","_Object$getOwnPropertyDescriptors","_forEachInstanceProperty2","_Object$getOwnPropertyDescriptor","_filterInstanceProperty","_Object$getOwnPropertySymbols","_Object$keys2","exports","value","default","_map","_find","_defineProperty2","_create","_promise","_isArray","_regenerator","_asyncToGenerator2","_concat","_getPrototypeOf","_includes","_stringify","_forEach","_keys","_freeze","_typeof2","_classCallCheck2","_createClass2","_defineProperty3","_indexOf","_CoreManager","_canBeSerialized","_decode","_encode","_escape2","_ParseACL","_parseDate","_ParseError","_ParseFile","_promiseUtils","_LocalDatastoreUtils","_ParseOp","_ParseQuery","_ParseRelation","SingleInstanceStateController","_interopRequireWildcard","_unique","UniqueInstanceStateController","_unsavedChildren","_getRequireWildcardCache","nodeInterop","cacheBabelInterop","cacheNodeInterop","obj","__esModule","cache","has","get","newObj","key","Object","prototype","hasOwnProperty","call","desc","set","_createForOfIteratorHelper","o","allowArrayLike","it","_unsupportedIterableToArray","length","i","F","s","n","done","e","_e","f","TypeError","normalCompletion","didErr","err","step","next","_e2","return","minLen","_context21","_arrayLikeToArray","toString","constructor","name","test","arr","len","arr2","Array","ownKeys","object","enumerableOnly","keys","symbols","sym","enumerable","push","apply","_objectSpread","target","arguments","source","_context19","_context20","uuidv4","classMap","objectCount","singleInstance","setObjectStateController","getServerUrlPath","serverUrl","url","replace","substr","ParseObject","className","attributes","options","initialize","toSet","_objCount","_attr","Error","stateController","getObjectStateController","estimateAttributes","_getStateIdentifier","_getServerData","createdAt","updatedAt","id","_localId","localId","concat","_getId","getServerData","serverData","unset","_attr2","undefined","setServerData","getPendingOps","keysToClear","pending","_getPendingOps","latest","objectCache","getObjectCache","dirty","_attr3","val","json","stringified","seen","offline","toJSON","__type","dirtyObjects","_getDirtyObjectAttributes","attr","isDotNotation","field","fieldName","split","SetOp","method","body","_getSaveJSON","path","objectId","initializeState","decoded","_attr4","_ensureParentAndKey","commitServerChanges","existed","state","getState","serverId","oldState","removeState","response","status","changes","popPendingState","RelationOp","applyTo","UnsetOp","_migrateId","_setExisted","mergeFirstPendingState","_context","seenEntry","attrs","_attr5","_attr6","other","pendingOps","_attr7","_attr8","newOps","readonly","readOnlyAttributes","k","Op","__op","opFromJSON","relation","targetClassName","currentAttributes","newValues","_attr9","ignoreValidation","validation","validate","error","last","_attr10","nextOp","mergeWith","setPendingOp","amount","IncrementOp","item","AddOp","items","AddUniqueOp","RemoveOp","clone","copy","a","duplicateState","_exists","mark","_callee","query","wrap","_context2","prev","abrupt","t0","code","OBJECT_NOT_FOUND","stop","ACL","OTHER_CAUSE","_key","INVALID_KEY_NAME","acl","keysToRevert","_len","_key2","_iterator","_step","_key3","_clearPendingOps","erasable","_attr11","fetchOptions","useMasterKey","sessionToken","context","include","_context3","_context4","controller","getObjectController","fetch","arg1","arg2","arg3","_this","reject","saveOptions","installationId","unsaved","cascadeSave","save","then","destroyOptions","resolve","destroy","pinAllWithName","DEFAULT_PIN","unPinAllWithName","_isPinned","_callee2","localDatastore","objectKey","pin","_context5","getLocalDatastore","isEnabled","getKeyForObject","fromPinWithName","sent","_fetchFromLocalDatastore","_callee3","pinned","result","_context6","_serializeObject","fromJSON","_finishFetch","clearAllState","list","queryOptions","handleIncludeOptions","fetchAll","fetchAllIfNeeded","_context7","batchSize","override","otherAttributes","_attr12","preserved","_preserveFieldsOnFetch","_clearServerData","protoProps","classProps","extend","adjustedClassName","parentProto","__super__","ParseObjectSubclass","writable","configurable","prop","_prop","createWithoutData","objects","_handlePinAllWithName","_handleUnPinAllWithName","unPinWithName","PIN_PREFIX","DefaultController","forceFetch","objs","ids","results","el","INVALID_CLASS_NAME","MISSING_OBJECT_ID","isDataAvailable","containedIn","_limit","_ref","_callee4","idMap","_i","_obj","_iterator2","_step2","_context8","_updateObjectIfPinned","finish","_context9","RESTController","getRESTController","params","join","request","_ref2","_callee5","_context10","_callee8","batches","deleteCompleted","errors","_context14","_context16","pop","batch","requests","_context11","_context12","_callee6","aggregate","_iterator3","_step3","_context13","AGGREGATE_ERROR","_destroyObjectIfPinned","_callee7","_context15","mapIdForPin","returnStatus","filesSaved","all","objectError","continueWhile","nextPending","batchReturned","resolvingPromise","batchReady","batchTasks","index","ready","pushPendingState","enqueueTask","responses","success","_status","_handleSaveResponse","serverError","_handleSaveError","when","_getSaveParams","INCORRECT_TYPE","message","_callee9","_iterator4","_step4","_context17","_updateLocalIdForObject","targetCopy","task","_callee10","_context18","setObjectController","_default"],"sources":["C:/Users/Kye Goullet/Documents/opensea Dapp/ethereum-nft-marketplace-boilerplate/node_modules/moralis/lib/browser/ParseObject.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs3/helpers/interopRequireDefault\");\n\nvar _typeof3 = require(\"@babel/runtime-corejs3/helpers/typeof\");\n\nvar _WeakMap = require(\"@babel/runtime-corejs3/core-js-stable/weak-map\");\n\nvar _Array$isArray2 = require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\");\n\nvar _getIteratorMethod = require(\"@babel/runtime-corejs3/core-js/get-iterator-method\");\n\nvar _Symbol = require(\"@babel/runtime-corejs3/core-js-stable/symbol\");\n\nvar _Array$from = require(\"@babel/runtime-corejs3/core-js-stable/array/from\");\n\nvar _sliceInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/slice\");\n\nvar _Object$defineProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\");\n\nvar _Object$defineProperties = require(\"@babel/runtime-corejs3/core-js-stable/object/define-properties\");\n\nvar _Object$getOwnPropertyDescriptors = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\");\n\nvar _forEachInstanceProperty2 = require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\");\n\nvar _Object$getOwnPropertyDescriptor = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\");\n\nvar _filterInstanceProperty = require(\"@babel/runtime-corejs3/core-js-stable/instance/filter\");\n\nvar _Object$getOwnPropertySymbols = require(\"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\");\n\nvar _Object$keys2 = require(\"@babel/runtime-corejs3/core-js-stable/object/keys\");\n\n_Object$defineProperty2(exports, \"__esModule\", {\n  value: true\n});\n\nexports.default = void 0;\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/map\"));\n\nvar _find = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/find\"));\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/define-property\"));\n\nvar _create = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/create\"));\n\nvar _promise = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/promise\"));\n\nvar _isArray = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/array/is-array\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime-corejs3/regenerator\"));\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/asyncToGenerator\"));\n\nvar _concat = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/concat\"));\n\nvar _getPrototypeOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/get-prototype-of\"));\n\nvar _includes = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/includes\"));\n\nvar _stringify = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/json/stringify\"));\n\nvar _forEach = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/for-each\"));\n\nvar _keys = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/keys\"));\n\nvar _freeze = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/object/freeze\"));\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/typeof\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/createClass\"));\n\nvar _defineProperty3 = _interopRequireDefault(require(\"@babel/runtime-corejs3/helpers/defineProperty\"));\n\nvar _indexOf = _interopRequireDefault(require(\"@babel/runtime-corejs3/core-js-stable/instance/index-of\"));\n\nvar _CoreManager = _interopRequireDefault(require(\"./CoreManager\"));\n\nvar _canBeSerialized = _interopRequireDefault(require(\"./canBeSerialized\"));\n\nvar _decode = _interopRequireDefault(require(\"./decode\"));\n\nvar _encode = _interopRequireDefault(require(\"./encode\"));\n\nvar _escape2 = _interopRequireDefault(require(\"./escape\"));\n\nvar _ParseACL = _interopRequireDefault(require(\"./ParseACL\"));\n\nvar _parseDate = _interopRequireDefault(require(\"./parseDate\"));\n\nvar _ParseError = _interopRequireDefault(require(\"./ParseError\"));\n\nvar _ParseFile = _interopRequireDefault(require(\"./ParseFile\"));\n\nvar _promiseUtils = require(\"./promiseUtils\");\n\nvar _LocalDatastoreUtils = require(\"./LocalDatastoreUtils\");\n\nvar _ParseOp = require(\"./ParseOp\");\n\nvar _ParseQuery = _interopRequireDefault(require(\"./ParseQuery\"));\n\nvar _ParseRelation = _interopRequireDefault(require(\"./ParseRelation\"));\n\nvar SingleInstanceStateController = _interopRequireWildcard(require(\"./SingleInstanceStateController\"));\n\nvar _unique = _interopRequireDefault(require(\"./unique\"));\n\nvar UniqueInstanceStateController = _interopRequireWildcard(require(\"./UniqueInstanceStateController\"));\n\nvar _unsavedChildren = _interopRequireDefault(require(\"./unsavedChildren\"));\n\nfunction _getRequireWildcardCache(nodeInterop) {\n  if (typeof _WeakMap !== \"function\") return null;\n  var cacheBabelInterop = new _WeakMap();\n  var cacheNodeInterop = new _WeakMap();\n  return (_getRequireWildcardCache = function (nodeInterop) {\n    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;\n  })(nodeInterop);\n}\n\nfunction _interopRequireWildcard(obj, nodeInterop) {\n  if (!nodeInterop && obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || _typeof3(obj) !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache(nodeInterop);\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n\n  for (var key in obj) {\n    if (key !== \"default\" && Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = _Object$defineProperty2 && _Object$getOwnPropertyDescriptor ? _Object$getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        _Object$defineProperty2(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof _Symbol !== \"undefined\" && _getIteratorMethod(o) || o[\"@@iterator\"];\n\n  if (!it) {\n    if (_Array$isArray2(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function () {};\n\n      return {\n        s: F,\n        n: function () {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function (_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function () {\n      it = it.call(o);\n    },\n    n: function () {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function (_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function () {\n      try {\n        if (!normalCompletion && it.return != null) it.return();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  var _context21;\n\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n\n  var n = _sliceInstanceProperty(_context21 = Object.prototype.toString.call(o)).call(_context21, 8, -1);\n\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return _Array$from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys2(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      var _context19;\n\n      _forEachInstanceProperty2(_context19 = ownKeys(Object(source), true)).call(_context19, function (key) {\n        (0, _defineProperty3.default)(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      var _context20;\n\n      _forEachInstanceProperty2(_context20 = ownKeys(Object(source))).call(_context20, function (key) {\n        _Object$defineProperty2(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nvar uuidv4 = require('uuid/v4');\n/*:: export type Pointer = {\n  __type: string,\n  className: string,\n  objectId: string,\n};*/\n\n/*:: type SaveParams = {\n  method: string,\n  path: string,\n  body: AttributeMap,\n};*/\n\n/*:: type SaveOptions = FullOptions & {\n  cascadeSave?: boolean,\n  context?: AttributeMap,\n};*/\n// Mapping of class names to constructors, so we can populate objects from the\n// server with appropriate subclasses of ParseObject\n\n\nvar classMap = {}; // Global counter for generating unique Ids for non-single-instance objects\n\nvar objectCount = 0; // On web clients, objects are single-instance: any two objects with the same Id\n// will have the same attributes. However, this may be dangerous default\n// behavior in a server scenario\n\nvar singleInstance = !_CoreManager.default.get('IS_NODE');\n\nif (singleInstance) {\n  _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n} else {\n  _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n}\n\nfunction getServerUrlPath() {\n  var serverUrl = _CoreManager.default.get('SERVER_URL');\n\n  if (serverUrl[serverUrl.length - 1] !== '/') {\n    serverUrl += '/';\n  }\n\n  var url = serverUrl.replace(/https?:\\/\\//, '');\n  return url.substr((0, _indexOf.default)(url).call(url, '/'));\n}\n/**\n * Creates a new model with defined attributes.\n *\n * <p>You won't normally call this method directly.  It is recommended that\n * you use a subclass of <code>Parse.Object</code> instead, created by calling\n * <code>extend</code>.</p>\n *\n * <p>However, if you don't want to use a subclass, or aren't sure which\n * subclass is appropriate, you can use this form:<pre>\n *     var object = new Parse.Object(\"ClassName\");\n * </pre>\n * That is basically equivalent to:<pre>\n *     var MyClass = Parse.Object.extend(\"ClassName\");\n *     var object = new MyClass();\n * </pre></p>\n *\n * @alias Parse.Object\n */\n\n\nvar ParseObject = /*#__PURE__*/function () {\n  /**\n   * @param {string} className The class name for the object\n   * @param {object} attributes The initial set of data to store in the object.\n   * @param {object} options The options for this object instance.\n   */\n  function ParseObject(className\n  /*: ?string | { className: string, [attr: string]: mixed }*/\n  , attributes\n  /*:: ?: { [attr: string]: mixed }*/\n  , options\n  /*:: ?: { ignoreValidation: boolean }*/\n  ) {\n    (0, _classCallCheck2.default)(this, ParseObject);\n    (0, _defineProperty3.default)(this, \"id\", void 0);\n    (0, _defineProperty3.default)(this, \"_localId\", void 0);\n    (0, _defineProperty3.default)(this, \"_objCount\", void 0);\n    (0, _defineProperty3.default)(this, \"className\", void 0); // Enable legacy initializers\n\n    if (typeof this.initialize === 'function') {\n      this.initialize.apply(this, arguments);\n    }\n\n    var toSet = null;\n    this._objCount = objectCount++;\n\n    if (typeof className === 'string') {\n      this.className = className;\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        toSet = attributes;\n      }\n    } else if (className && (0, _typeof2.default)(className) === 'object') {\n      this.className = className.className;\n      toSet = {};\n\n      for (var _attr in className) {\n        if (_attr !== 'className') {\n          toSet[_attr] = className[_attr];\n        }\n      }\n\n      if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n        options = attributes;\n      }\n    }\n\n    if (toSet && !this.set(toSet, options)) {\n      throw new Error(\"Can't create an invalid Parse Object\");\n    }\n  }\n  /**\n   * The ID of this object, unique within its class.\n   *\n   * @property {string} id\n   */\n\n\n  (0, _createClass2.default)(ParseObject, [{\n    key: \"attributes\",\n    get:\n    /** Prototype getters / setters * */\n    function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return (0, _freeze.default)(stateController.estimateAttributes(this._getStateIdentifier()));\n    }\n    /**\n     * The first time this object was saved on the server.\n     *\n     * @property {Date} createdAt\n     * @returns {Date}\n     */\n\n  }, {\n    key: \"createdAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().createdAt;\n    }\n    /**\n     * The last time this object was updated on the server.\n     *\n     * @property {Date} updatedAt\n     * @returns {Date}\n     */\n\n  }, {\n    key: \"updatedAt\",\n    get: function ()\n    /*: ?Date*/\n    {\n      return this._getServerData().updatedAt;\n    }\n    /** Private methods * */\n\n    /**\n     * Returns a local or server Id used uniquely identify this object\n     *\n     * @returns {string}\n     */\n\n  }, {\n    key: \"_getId\",\n    value: function ()\n    /*: string*/\n    {\n      if (typeof this.id === 'string') {\n        return this.id;\n      }\n\n      if (typeof this._localId === 'string') {\n        return this._localId;\n      }\n\n      var localId = \"local\".concat(uuidv4());\n      this._localId = localId;\n      return localId;\n    }\n    /**\n     * Returns a unique identifier used to pull data from the State Controller.\n     *\n     * @returns {Parse.Object|object}\n     */\n\n  }, {\n    key: \"_getStateIdentifier\",\n    value: function ()\n    /*: ParseObject | { id: string, className: string }*/\n    {\n      if (singleInstance) {\n        var id = this.id;\n\n        if (!id) {\n          id = this._getId();\n        }\n\n        return {\n          id: id,\n          className: this.className\n        };\n      }\n\n      return this;\n    }\n  }, {\n    key: \"_getServerData\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getServerData(this._getStateIdentifier());\n    }\n  }, {\n    key: \"_clearServerData\",\n    value: function () {\n      var serverData = this._getServerData();\n\n      var unset = {};\n\n      for (var _attr2 in serverData) {\n        unset[_attr2] = undefined;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.setServerData(this._getStateIdentifier(), unset);\n    }\n  }, {\n    key: \"_getPendingOps\",\n    value: function ()\n    /*: Array<OpsMap>*/\n    {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      return stateController.getPendingOps(this._getStateIdentifier());\n    }\n    /**\n     * @param {Array<string>} [keysToClear] - if specified, only ops matching\n     * these fields will be cleared\n     */\n\n  }, {\n    key: \"_clearPendingOps\",\n    value: function (keysToClear\n    /*:: ?: Array<string>*/\n    ) {\n      var pending = this._getPendingOps();\n\n      var latest = pending[pending.length - 1];\n      var keys = keysToClear || (0, _keys.default)(latest);\n      (0, _forEach.default)(keys).call(keys, function (key) {\n        delete latest[key];\n      });\n    }\n  }, {\n    key: \"_getDirtyObjectAttributes\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var attributes = this.attributes;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var objectCache = stateController.getObjectCache(this._getStateIdentifier());\n      var dirty = {};\n\n      for (var _attr3 in attributes) {\n        var val = attributes[_attr3];\n\n        if (val && (0, _typeof2.default)(val) === 'object' && !(val instanceof ParseObject) && !(val instanceof _ParseFile.default) && !(val instanceof _ParseRelation.default)) {\n          // Due to the way browsers construct maps, the key order will not change\n          // unless the object is changed\n          try {\n            var json = (0, _encode.default)(val, false, true);\n            var stringified = (0, _stringify.default)(json);\n\n            if (objectCache[_attr3] !== stringified) {\n              dirty[_attr3] = val;\n            }\n          } catch (e) {\n            // Error occurred, possibly by a nested unsaved pointer in a mutable container\n            // No matter how it happened, it indicates a change in the attribute\n            dirty[_attr3] = val;\n          }\n        }\n      }\n\n      return dirty;\n    }\n  }, {\n    key: \"_toFullJSON\",\n    value: function (seen\n    /*:: ?: Array<any>*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var json\n      /*: { [key: string]: mixed }*/\n      = this.toJSON(seen, offline);\n      json.__type = 'Object';\n      json.className = this.className;\n      return json;\n    }\n  }, {\n    key: \"_getSaveJSON\",\n    value: function ()\n    /*: AttributeMap*/\n    {\n      var pending = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      var json = {};\n\n      for (var attr in dirtyObjects) {\n        var isDotNotation = false;\n\n        for (var i = 0; i < pending.length; i += 1) {\n          for (var field in pending[i]) {\n            // Dot notation operations are handled later\n            if ((0, _includes.default)(field).call(field, '.')) {\n              var fieldName = field.split('.')[0];\n\n              if (fieldName === attr) {\n                isDotNotation = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (!isDotNotation) {\n          json[attr] = new _ParseOp.SetOp(dirtyObjects[attr]).toJSON();\n        }\n      }\n\n      for (attr in pending[0]) {\n        json[attr] = pending[0][attr].toJSON();\n      }\n\n      return json;\n    }\n  }, {\n    key: \"_getSaveParams\",\n    value: function ()\n    /*: SaveParams*/\n    {\n      var method = this.id ? 'PUT' : 'POST';\n\n      var body = this._getSaveJSON();\n\n      var path = \"classes/\".concat(this.className);\n\n      if (this.id) {\n        path += \"/\".concat(this.id);\n      } else if (this.className === '_User') {\n        path = 'users';\n      }\n\n      return {\n        method: method,\n        body: body,\n        path: path\n      };\n    }\n  }, {\n    key: \"_finishFetch\",\n    value: function (serverData\n    /*: AttributeMap*/\n    ) {\n      if (!this.id && serverData.objectId) {\n        this.id = serverData.objectId;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.initializeState(this._getStateIdentifier());\n      var decoded = {};\n\n      for (var _attr4 in serverData) {\n        if (_attr4 === 'ACL') {\n          decoded[_attr4] = new _ParseACL.default(serverData[_attr4]);\n        } else if (_attr4 !== 'objectId') {\n          decoded[_attr4] = (0, _decode.default)(serverData[_attr4]);\n\n          if (decoded[_attr4] instanceof _ParseRelation.default) {\n            decoded[_attr4]._ensureParentAndKey(this, _attr4);\n          }\n        }\n      }\n\n      if (decoded.createdAt && typeof decoded.createdAt === 'string') {\n        decoded.createdAt = (0, _parseDate.default)(decoded.createdAt);\n      }\n\n      if (decoded.updatedAt && typeof decoded.updatedAt === 'string') {\n        decoded.updatedAt = (0, _parseDate.default)(decoded.updatedAt);\n      }\n\n      if (!decoded.updatedAt && decoded.createdAt) {\n        decoded.updatedAt = decoded.createdAt;\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), decoded);\n    }\n  }, {\n    key: \"_setExisted\",\n    value: function (existed\n    /*: boolean*/\n    ) {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        state.existed = existed;\n      }\n    }\n  }, {\n    key: \"_migrateId\",\n    value: function (serverId\n    /*: string*/\n    ) {\n      if (this._localId && serverId) {\n        if (singleInstance) {\n          var stateController = _CoreManager.default.getObjectStateController();\n\n          var oldState = stateController.removeState(this._getStateIdentifier());\n          this.id = serverId;\n          delete this._localId;\n\n          if (oldState) {\n            stateController.initializeState(this._getStateIdentifier(), oldState);\n          }\n        } else {\n          this.id = serverId;\n          delete this._localId;\n        }\n      }\n    }\n  }, {\n    key: \"_handleSaveResponse\",\n    value: function (response\n    /*: AttributeMap*/\n    , status\n    /*: number*/\n    ) {\n      var changes = {};\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var pending = stateController.popPendingState(this._getStateIdentifier());\n\n      for (var attr in pending) {\n        if (pending[attr] instanceof _ParseOp.RelationOp) {\n          changes[attr] = pending[attr].applyTo(undefined, this, attr);\n        } else if (!(attr in response) && !(0, _includes.default)(attr).call(attr, '.')) {\n          // Only SetOps and UnsetOps should not come back with results\n          changes[attr] = pending[attr].applyTo(undefined);\n        }\n      }\n\n      for (attr in response) {\n        if ((attr === 'createdAt' || attr === 'updatedAt') && typeof response[attr] === 'string') {\n          changes[attr] = (0, _parseDate.default)(response[attr]);\n        } else if (attr === 'ACL') {\n          changes[attr] = new _ParseACL.default(response[attr]);\n        } else if (attr !== 'objectId') {\n          var val = (0, _decode.default)(response[attr]);\n\n          if (val && (0, _getPrototypeOf.default)(val) === Object.prototype) {\n            changes[attr] = _objectSpread(_objectSpread({}, this.attributes[attr]), val);\n          } else {\n            changes[attr] = val;\n          }\n\n          if (changes[attr] instanceof _ParseOp.UnsetOp) {\n            changes[attr] = undefined;\n          }\n        }\n      }\n\n      if (changes.createdAt && !changes.updatedAt) {\n        changes.updatedAt = changes.createdAt;\n      }\n\n      this._migrateId(response.objectId);\n\n      if (status !== 201) {\n        this._setExisted(true);\n      }\n\n      stateController.commitServerChanges(this._getStateIdentifier(), changes);\n    }\n  }, {\n    key: \"_handleSaveError\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.mergeFirstPendingState(this._getStateIdentifier());\n    }\n    /** Public methods * */\n\n  }, {\n    key: \"initialize\",\n    value: function () {// NOOP\n    }\n    /**\n     * Returns a JSON version of the object suitable for saving to Parse.\n     *\n     * @param seen\n     * @param offline\n     * @returns {object}\n     */\n\n  }, {\n    key: \"toJSON\",\n    value: function (seen\n    /*: Array<any> | void*/\n    , offline\n    /*:: ?: boolean*/\n    )\n    /*: AttributeMap*/\n    {\n      var _context;\n\n      var seenEntry = this.id ? (0, _concat.default)(_context = \"\".concat(this.className, \":\")).call(_context, this.id) : this;\n      seen = seen || [seenEntry];\n      var json = {};\n      var attrs = this.attributes;\n\n      for (var _attr5 in attrs) {\n        if ((_attr5 === 'createdAt' || _attr5 === 'updatedAt') && attrs[_attr5].toJSON) {\n          json[_attr5] = attrs[_attr5].toJSON();\n        } else {\n          json[_attr5] = (0, _encode.default)(attrs[_attr5], false, false, seen, offline);\n        }\n      }\n\n      var pending = this._getPendingOps();\n\n      for (var _attr6 in pending[0]) {\n        json[_attr6] = pending[0][_attr6].toJSON(offline);\n      }\n\n      if (this.id) {\n        json.objectId = this.id;\n      }\n\n      return json;\n    }\n    /**\n     * Determines whether this ParseObject is equal to another ParseObject\n     *\n     * @param {object} other - An other object ot compare\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"equals\",\n    value: function (other\n    /*: mixed*/\n    )\n    /*: boolean*/\n    {\n      if (this === other) {\n        return true;\n      }\n\n      return other instanceof ParseObject && this.className === other.className && this.id === other.id && typeof this.id !== 'undefined';\n    }\n    /**\n     * Returns true if this object has been modified since its last\n     * save/refresh.  If an attribute is specified, it returns true only if that\n     * particular attribute has been modified since the last save/refresh.\n     *\n     * @param {string} attr An attribute name (optional).\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"dirty\",\n    value: function (attr\n    /*:: ?: string*/\n    )\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return true;\n      }\n\n      var pendingOps = this._getPendingOps();\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      if (attr) {\n        if (dirtyObjects.hasOwnProperty(attr)) {\n          return true;\n        }\n\n        for (var i = 0; i < pendingOps.length; i++) {\n          if (pendingOps[i].hasOwnProperty(attr)) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      if ((0, _keys.default)(pendingOps[0]).length !== 0) {\n        return true;\n      }\n\n      if ((0, _keys.default)(dirtyObjects).length !== 0) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * Returns an array of keys that have been modified since last save/refresh\n     *\n     * @returns {string[]}\n     */\n\n  }, {\n    key: \"dirtyKeys\",\n    value: function ()\n    /*: Array<string>*/\n    {\n      var pendingOps = this._getPendingOps();\n\n      var keys = {};\n\n      for (var i = 0; i < pendingOps.length; i++) {\n        for (var _attr7 in pendingOps[i]) {\n          keys[_attr7] = true;\n        }\n      }\n\n      var dirtyObjects = this._getDirtyObjectAttributes();\n\n      for (var _attr8 in dirtyObjects) {\n        keys[_attr8] = true;\n      }\n\n      return (0, _keys.default)(keys);\n    }\n    /**\n     * Returns true if the object has been fetched.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isDataAvailable\",\n    value: function ()\n    /*: boolean*/\n    {\n      var serverData = this._getServerData();\n\n      return !!(0, _keys.default)(serverData).length;\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n\n  }, {\n    key: \"toPointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this.id) {\n        throw new Error('Cannot create a pointer to an unsaved ParseObject');\n      }\n\n      return {\n        __type: 'Pointer',\n        className: this.className,\n        objectId: this.id\n      };\n    }\n    /**\n     * Gets a Pointer referencing this Object.\n     *\n     * @returns {Pointer}\n     */\n\n  }, {\n    key: \"toOfflinePointer\",\n    value: function ()\n    /*: Pointer*/\n    {\n      if (!this._localId) {\n        throw new Error('Cannot create a offline pointer to a saved ParseObject');\n      }\n\n      return {\n        __type: 'Object',\n        className: this.className,\n        _localId: this._localId\n      };\n    }\n    /**\n     * Gets the value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {*}\n     */\n\n  }, {\n    key: \"get\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: mixed*/\n    {\n      return this.attributes[attr];\n    }\n    /**\n     * Gets a relation on the given class for the attribute.\n     *\n     * @param {string} attr The attribute to get the relation for.\n     * @returns {Parse.Relation}\n     */\n\n  }, {\n    key: \"relation\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ParseRelation*/\n    {\n      var value = this.get(attr);\n\n      if (value) {\n        if (!(value instanceof _ParseRelation.default)) {\n          throw new Error(\"Called relation() on non-relation field \".concat(attr));\n        }\n\n        value._ensureParentAndKey(this, attr);\n\n        return value;\n      }\n\n      return new _ParseRelation.default(this, attr);\n    }\n    /**\n     * Gets the HTML-escaped value of an attribute.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @returns {string}\n     */\n\n  }, {\n    key: \"escape\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: string*/\n    {\n      var val = this.attributes[attr];\n\n      if (val == null) {\n        return '';\n      }\n\n      if (typeof val !== 'string') {\n        if (typeof val.toString !== 'function') {\n          return '';\n        }\n\n        val = val.toString();\n      }\n\n      return (0, _escape2.default)(val);\n    }\n    /**\n     * Returns <code>true</code> if the attribute contains a value that is not\n     * null or undefined.\n     *\n     * @param {string} attr The string name of the attribute.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"has\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: boolean*/\n    {\n      var attributes = this.attributes;\n\n      if (attributes.hasOwnProperty(attr)) {\n        return attributes[attr] != null;\n      }\n\n      return false;\n    }\n    /**\n     * Sets a hash of model attributes on the object.\n     *\n     * <p>You can call it with an object containing keys and values, with one\n     * key and value, or dot notation.  For example:<pre>\n     *   gameTurn.set({\n     *     player: player1,\n     *     diceRoll: 2\n     *   }, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"currentPlayer\", player2, {\n     *     error: function(gameTurnAgain, error) {\n     *       // The set failed validation.\n     *     }\n     *   });\n     *\n     *   game.set(\"finished\", true);</pre></p>\n     *\n     *   game.set(\"player.score\", 10);</pre></p>\n     *\n     * @param {(string|object)} key The key to set.\n     * @param {(string|object)} value The value to give it.\n     * @param {object} options A set of options for the set.\n     *     The only supported option is <code>error</code>.\n     * @returns {(ParseObject|boolean)} true if the set succeeded.\n     */\n\n  }, {\n    key: \"set\",\n    value: function (key\n    /*: mixed*/\n    , value\n    /*: mixed*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      var changes = {};\n      var newOps = {};\n\n      if (key && (0, _typeof2.default)(key) === 'object') {\n        changes = key;\n        options = value;\n      } else if (typeof key === 'string') {\n        changes[key] = value;\n      } else {\n        return this;\n      }\n\n      options = options || {};\n      var readonly = [];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var k in changes) {\n        if (k === 'createdAt' || k === 'updatedAt') {\n          // This property is read-only, but for legacy reasons we silently\n          // ignore it\n          continue;\n        }\n\n        if ((0, _indexOf.default)(readonly).call(readonly, k) > -1) {\n          throw new Error(\"Cannot modify readonly attribute: \".concat(k));\n        }\n\n        if (options.unset) {\n          newOps[k] = new _ParseOp.UnsetOp();\n        } else if (changes[k] instanceof _ParseOp.Op) {\n          newOps[k] = changes[k];\n        } else if (changes[k] && (0, _typeof2.default)(changes[k]) === 'object' && typeof changes[k].__op === 'string') {\n          newOps[k] = (0, _ParseOp.opFromJSON)(changes[k]);\n        } else if (k === 'objectId' || k === 'id') {\n          if (typeof changes[k] === 'string') {\n            this.id = changes[k];\n          }\n        } else if (k === 'ACL' && (0, _typeof2.default)(changes[k]) === 'object' && !(changes[k] instanceof _ParseACL.default)) {\n          newOps[k] = new _ParseOp.SetOp(new _ParseACL.default(changes[k]));\n        } else if (changes[k] instanceof _ParseRelation.default) {\n          var relation = new _ParseRelation.default(this, k);\n          relation.targetClassName = changes[k].targetClassName;\n          newOps[k] = new _ParseOp.SetOp(relation);\n        } else {\n          newOps[k] = new _ParseOp.SetOp(changes[k]);\n        }\n      }\n\n      var currentAttributes = this.attributes; // Only set nested fields if exists\n\n      var serverData = this._getServerData();\n\n      if (typeof key === 'string' && (0, _includes.default)(key).call(key, '.')) {\n        var field = key.split('.')[0];\n\n        if (!serverData[field]) {\n          return this;\n        }\n      } // Calculate new values\n\n\n      var newValues = {};\n\n      for (var _attr9 in newOps) {\n        if (newOps[_attr9] instanceof _ParseOp.RelationOp) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9], this, _attr9);\n        } else if (!(newOps[_attr9] instanceof _ParseOp.UnsetOp)) {\n          newValues[_attr9] = newOps[_attr9].applyTo(currentAttributes[_attr9]);\n        }\n      } // Validate changes\n\n\n      if (!options.ignoreValidation) {\n        var validation = this.validate(newValues);\n\n        if (validation) {\n          if (typeof options.error === 'function') {\n            options.error(this, validation);\n          }\n\n          return false;\n        }\n      } // Consolidate Ops\n\n\n      var pendingOps = this._getPendingOps();\n\n      var last = pendingOps.length - 1;\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      for (var _attr10 in newOps) {\n        var nextOp = newOps[_attr10].mergeWith(pendingOps[last][_attr10]);\n\n        stateController.setPendingOp(this._getStateIdentifier(), _attr10, nextOp);\n      }\n\n      return this;\n    }\n    /**\n     * Remove an attribute from the model. This is a noop if the attribute doesn't\n     * exist.\n     *\n     * @param {string} attr The string name of an attribute.\n     * @param options\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"unset\",\n    value: function (attr\n    /*: string*/\n    , options\n    /*:: ?: { [opt: string]: mixed }*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      options = options || {};\n      options.unset = true;\n      return this.set(attr, null, options);\n    }\n    /**\n     * Atomically increments the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to increment by (optional).\n     * @returns {(ParseObject|boolean)}\n     */\n\n  }, {\n    key: \"increment\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot increment by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount));\n    }\n    /**\n     * Atomically decrements the value of the given attribute the next time the\n     * object is saved. If no amount is specified, 1 is used by default.\n     *\n     * @param attr {String} The key.\n     * @param amount {Number} The amount to decrement by (optional).\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"decrement\",\n    value: function (attr\n    /*: string*/\n    , amount\n    /*:: ?: number*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      if (typeof amount === 'undefined') {\n        amount = 1;\n      }\n\n      if (typeof amount !== 'number') {\n        throw new Error('Cannot decrement by a non-numeric amount.');\n      }\n\n      return this.set(attr, new _ParseOp.IncrementOp(amount * -1));\n    }\n    /**\n     * Atomically add an object to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The item to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"add\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp([item]));\n    }\n    /**\n     * Atomically add the objects to the end of the array associated with a given\n     * key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The items to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddOp(items));\n    }\n    /**\n     * Atomically add an object to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addUnique\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp([item]));\n    }\n    /**\n     * Atomically add the objects to the array associated with a given key, only\n     * if it is not already present in the array. The position of the insert is\n     * not guaranteed.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The objects to add.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"addAllUnique\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.AddUniqueOp(items));\n    }\n    /**\n     * Atomically remove all instances of an object from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param item {} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"remove\",\n    value: function (attr\n    /*: string*/\n    , item\n    /*: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp([item]));\n    }\n    /**\n     * Atomically remove all instances of the objects from the array associated\n     * with a given key.\n     *\n     * @param attr {String} The key.\n     * @param items {Object[]} The object to remove.\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"removeAll\",\n    value: function (attr\n    /*: string*/\n    , items\n    /*: Array<mixed>*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set(attr, new _ParseOp.RemoveOp(items));\n    }\n    /**\n     * Returns an instance of a subclass of Parse.Op describing what kind of\n     * modification has been performed on this field since the last time it was\n     * saved. For example, after calling object.increment(\"x\"), calling\n     * object.op(\"x\") would return an instance of Parse.Op.Increment.\n     *\n     * @param attr {String} The key.\n     * @returns {Parse.Op} The operation, or undefined if none.\n     */\n\n  }, {\n    key: \"op\",\n    value: function (attr\n    /*: string*/\n    )\n    /*: ?Op*/\n    {\n      var pending = this._getPendingOps();\n\n      for (var i = pending.length; i--;) {\n        if (pending[i][attr]) {\n          return pending[i][attr];\n        }\n      }\n    }\n    /**\n     * Creates a new model with identical attributes to this one.\n     *\n     * @returns {Parse.Object}\n     */\n\n  }, {\n    key: \"clone\",\n    value: function clone()\n    /*: any*/\n    {\n      var clone = new this.constructor();\n\n      if (!clone.className) {\n        clone.className = this.className;\n      }\n\n      var attributes = this.attributes;\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        var readonly = this.constructor.readOnlyAttributes() || []; // Attributes are frozen, so we have to rebuild an object,\n        // rather than delete readonly keys\n\n        var copy = {};\n\n        for (var a in attributes) {\n          if ((0, _indexOf.default)(readonly).call(readonly, a) < 0) {\n            copy[a] = attributes[a];\n          }\n        }\n\n        attributes = copy;\n      }\n\n      if (clone.set) {\n        clone.set(attributes);\n      }\n\n      return clone;\n    }\n    /**\n     * Creates a new instance of this object. Not to be confused with clone()\n     *\n     * @returns {Parse.Object}\n     */\n\n  }, {\n    key: \"newInstance\",\n    value: function ()\n    /*: any*/\n    {\n      var clone = new this.constructor();\n\n      if (!clone.className) {\n        clone.className = this.className;\n      }\n\n      clone.id = this.id;\n\n      if (singleInstance) {\n        // Just return an object with the right id\n        return clone;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      if (stateController) {\n        stateController.duplicateState(this._getStateIdentifier(), clone._getStateIdentifier());\n      }\n\n      return clone;\n    }\n    /**\n     * Returns true if this object has never been saved to Parse.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isNew\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.id;\n    }\n    /**\n     * Returns true if this object was created by the Parse server when the\n     * object might have already been there (e.g. in the case of a Facebook\n     * login)\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"existed\",\n    value: function ()\n    /*: boolean*/\n    {\n      if (!this.id) {\n        return false;\n      }\n\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      var state = stateController.getState(this._getStateIdentifier());\n\n      if (state) {\n        return state.existed;\n      }\n\n      return false;\n    }\n    /**\n     * Returns true if this object exists on the Server\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object exists.\n     */\n\n  }, {\n    key: \"exists\",\n    value: function () {\n      var _exists = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options\n      /*:: ?: RequestOptions*/\n      ) {\n        var query;\n        return _regenerator.default.wrap(function (_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this.id) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 2:\n                _context2.prev = 2;\n                query = new _ParseQuery.default(this.className);\n                _context2.next = 6;\n                return query.get(this.id, options);\n\n              case 6:\n                return _context2.abrupt(\"return\", true);\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](2);\n\n                if (!(_context2.t0.code === _ParseError.default.OBJECT_NOT_FOUND)) {\n                  _context2.next = 13;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", false);\n\n              case 13:\n                throw _context2.t0;\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee, this, [[2, 9]]);\n      }));\n\n      return function () {\n        return _exists.apply(this, arguments);\n      };\n    }()\n    /**\n     * Checks if the model is currently in a valid state.\n     *\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function ()\n    /*: boolean*/\n    {\n      return !this.validate(this.attributes);\n    }\n    /**\n     * You should not call this function directly unless you subclass\n     * <code>Parse.Object</code>, in which case you can override this method\n     * to provide additional validation on <code>set</code> and\n     * <code>save</code>.  Your implementation should return\n     *\n     * @param {object} attrs The current data to validate.\n     * @returns {Parse.Error|boolean} False if the data is valid.  An error object otherwise.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"validate\",\n    value: function (attrs\n    /*: AttributeMap*/\n    )\n    /*: ParseError | boolean*/\n    {\n      if (attrs.hasOwnProperty('ACL') && !(attrs.ACL instanceof _ParseACL.default)) {\n        return new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'ACL must be a Parse ACL.');\n      }\n\n      for (var _key in attrs) {\n        if (!/^[A-Za-z][0-9A-Za-z_.]*$/.test(_key)) {\n          return new _ParseError.default(_ParseError.default.INVALID_KEY_NAME);\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Returns the ACL for this object.\n     *\n     * @returns {Parse.ACL} An instance of Parse.ACL.\n     * @see Parse.Object#get\n     */\n\n  }, {\n    key: \"getACL\",\n    value: function ()\n    /*: ?ParseACL*/\n    {\n      var acl = this.get('ACL');\n\n      if (acl instanceof _ParseACL.default) {\n        return acl;\n      }\n\n      return null;\n    }\n    /**\n     * Sets the ACL to be used for this object.\n     *\n     * @param {Parse.ACL} acl An instance of Parse.ACL.\n     * @param {object} options\n     * @returns {(ParseObject | boolean)} Whether the set passed validation.\n     * @see Parse.Object#set\n     */\n\n  }, {\n    key: \"setACL\",\n    value: function (acl\n    /*: ParseACL*/\n    , options\n    /*:: ?: mixed*/\n    )\n    /*: ParseObject | boolean*/\n    {\n      return this.set('ACL', acl, options);\n    }\n    /**\n     * Clears any (or specific) changes to this object made since the last call to save()\n     *\n     * @param {string} [keys] - specify which fields to revert\n     */\n\n  }, {\n    key: \"revert\",\n    value: function ()\n    /*: void*/\n    {\n      var keysToRevert;\n\n      for (var _len = arguments.length, keys = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n        keys[_key2] = arguments[_key2];\n      }\n\n      if (keys.length) {\n        keysToRevert = [];\n\n        var _iterator = _createForOfIteratorHelper(keys),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var _key3 = _step.value;\n\n            if (typeof _key3 === 'string') {\n              keysToRevert.push(_key3);\n            } else {\n              throw new Error('Parse.Object#revert expects either no, or a list of string, arguments.');\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n\n      this._clearPendingOps(keysToRevert);\n    }\n    /**\n     * Clears all attributes on a model\n     *\n     * @returns {(ParseObject | boolean)}\n     */\n\n  }, {\n    key: \"clear\",\n    value: function ()\n    /*: ParseObject | boolean*/\n    {\n      var attributes = this.attributes;\n      var erasable = {};\n      var readonly = ['createdAt', 'updatedAt'];\n\n      if (typeof this.constructor.readOnlyAttributes === 'function') {\n        readonly = (0, _concat.default)(readonly).call(readonly, this.constructor.readOnlyAttributes());\n      }\n\n      for (var _attr11 in attributes) {\n        if ((0, _indexOf.default)(readonly).call(readonly, _attr11) < 0) {\n          erasable[_attr11] = true;\n        }\n      }\n\n      return this.set(erasable, {\n        unset: true\n      });\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeFind` trigger.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetch\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var fetchOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        fetchOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        fetchOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        fetchOptions.context = options.context;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        fetchOptions.include = [];\n\n        if ((0, _isArray.default)(options.include)) {\n          var _context3;\n\n          (0, _forEach.default)(_context3 = options.include).call(_context3, function (key) {\n            if ((0, _isArray.default)(key)) {\n              var _context4;\n\n              fetchOptions.include = (0, _concat.default)(_context4 = fetchOptions.include).call(_context4, key);\n            } else {\n              fetchOptions.include.push(key);\n            }\n          });\n        } else {\n          fetchOptions.include.push(options.include);\n        }\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      return controller.fetch(this, true, fetchOptions);\n    }\n    /**\n     * Fetch the model from the server. If the server's representation of the\n     * model differs from its current attributes, they will be overriden.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the fetch\n     *     completes.\n     */\n\n  }, {\n    key: \"fetchWithInclude\",\n    value: function (keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      options.include = keys;\n      return this.fetch(options);\n    }\n    /**\n     * Set a hash of model attributes, and save the model to the server.\n     * updatedAt will be updated when the request returns.\n     * You can either call it as:<pre>\n     * object.save();</pre>\n     * or<pre>\n     * object.save(attrs);</pre>\n     * or<pre>\n     * object.save(null, options);</pre>\n     * or<pre>\n     * object.save(attrs, options);</pre>\n     * or<pre>\n     * object.save(key, value, options);</pre>\n     *\n     * For example, <pre>\n     * gameTurn.save({\n     * player: \"Jake Cutter\",\n     * diceRoll: 2\n     * }).then(function(gameTurnAgain) {\n     * // The save was successful.\n     * }, function(error) {\n     * // The save failed.  Error is an instance of Parse.Error.\n     * });</pre>\n     *\n     * @param {string | object | null} [arg1]\n     * Valid options are:<ul>\n     * <li>`Object` - Key/value pairs to update on the object.</li>\n     * <li>`String` Key - Key of attribute to update (requires arg2 to also be string)</li>\n     * <li>`null` - Passing null for arg1 allows you to save the object with options passed in arg2.</li>\n     * </ul>\n     * @param {string | object} [arg2]\n     * <ul>\n     * <li>`String` Value - If arg1 was passed as a key, arg2 is the value that should be set on that key.</li>\n     * <li>`Object` Options - Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * </li>\n     * </ul>\n     * @param {object} [arg3]\n     * Used to pass option parameters to method if arg1 and arg2 were both passed as strings.\n     * Valid options are:\n     * <ul>\n     * <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     * be used for this request.\n     * <li>sessionToken: A valid session token, used for making a request on\n     * behalf of a specific user.\n     * <li>cascadeSave: If `false`, nested objects will not be saved (default is `true`).\n     * <li>context: A dictionary that is accessible in Cloud Code `beforeSave` and `afterSave` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the save\n     * completes.\n     */\n\n  }, {\n    key: \"save\",\n    value: function (arg1\n    /*: ?string | { [attr: string]: mixed }*/\n    , arg2\n    /*: SaveOptions | mixed*/\n    , arg3\n    /*:: ?: SaveOptions*/\n    )\n    /*: Promise*/\n    {\n      var _this = this;\n\n      var attrs;\n      var options;\n\n      if ((0, _typeof2.default)(arg1) === 'object' || typeof arg1 === 'undefined') {\n        attrs = arg1;\n\n        if ((0, _typeof2.default)(arg2) === 'object') {\n          options = arg2;\n        }\n      } else {\n        attrs = {};\n        attrs[arg1] = arg2;\n        options = arg3;\n      }\n\n      if (attrs) {\n        var validation = this.validate(attrs);\n\n        if (validation) {\n          return _promise.default.reject(validation);\n        }\n\n        this.set(attrs, options);\n      }\n\n      options = options || {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = !!options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken') && typeof options.sessionToken === 'string') {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('installationId') && typeof options.installationId === 'string') {\n        saveOptions.installationId = options.installationId;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      var controller = _CoreManager.default.getObjectController();\n\n      var unsaved = options.cascadeSave !== false ? (0, _unsavedChildren.default)(this) : null;\n      return controller.save(unsaved, saveOptions).then(function () {\n        return controller.save(_this, saveOptions);\n      });\n    }\n    /**\n     * Destroy this model on the server if it was already persisted.\n     *\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>context: A dictionary that is accessible in Cloud Code `beforeDelete` and `afterDelete` triggers.\n     * </ul>\n     * @returns {Promise} A promise that is fulfilled when the destroy\n     *     completes.\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function (options\n    /*: RequestOptions*/\n    )\n    /*: Promise*/\n    {\n      options = options || {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      if (!this.id) {\n        return _promise.default.resolve();\n      }\n\n      return _CoreManager.default.getObjectController().destroy(this, destroyOptions);\n    }\n    /**\n     * Asynchronously stores the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pin();\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await object.unPin();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPin\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, [this]);\n    }\n    /**\n     * Asynchronously returns if the object is pinned\n     *\n     * <pre>\n     * const isPinned = await object.isPinned();\n     * </pre>\n     *\n     * @returns {Promise<boolean>} A boolean promise that is fulfilled if object is pinned.\n     */\n\n  }, {\n    key: \"isPinned\",\n    value: function () {\n      var _isPinned = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee2() {\n        var localDatastore, objectKey, pin;\n        return _regenerator.default.wrap(function (_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context5.next = 3;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", _promise.default.reject('Parse.enableLocalDatastore() must be called first'));\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context5.next = 6;\n                return localDatastore.fromPinWithName(objectKey);\n\n              case 6:\n                pin = _context5.sent;\n                return _context5.abrupt(\"return\", pin.length > 0);\n\n              case 8:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function () {\n        return _isPinned.apply(this, arguments);\n      };\n    }()\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await object.pinWithName(name);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     */\n\n  }, {\n    key: \"pinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.pinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously removes the object and every object it points to in the local datastore, recursively.\n     *\n     * <pre>\n     * await object.unPinWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     */\n\n  }, {\n    key: \"unPinWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      return ParseObject.unPinAllWithName(name, [this]);\n    }\n    /**\n     * Asynchronously loads data from the local datastore into this object.\n     *\n     * <pre>\n     * await object.fetchFromLocalDatastore();\n     * </pre>\n     *\n     * You can create an unfetched pointer with <code>Parse.Object.createWithoutData()</code>\n     * and then call <code>fetchFromLocalDatastore()</code> on it.\n     *\n     * @returns {Promise} A promise that is fulfilled when the fetch completes.\n     */\n\n  }, {\n    key: \"fetchFromLocalDatastore\",\n    value: function () {\n      var _fetchFromLocalDatastore = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee3() {\n        var localDatastore, objectKey, pinned, result;\n        return _regenerator.default.wrap(function (_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                localDatastore = _CoreManager.default.getLocalDatastore();\n\n                if (localDatastore.isEnabled) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                throw new Error('Parse.enableLocalDatastore() must be called first');\n\n              case 3:\n                objectKey = localDatastore.getKeyForObject(this);\n                _context6.next = 6;\n                return localDatastore._serializeObject(objectKey);\n\n              case 6:\n                pinned = _context6.sent;\n\n                if (pinned) {\n                  _context6.next = 9;\n                  break;\n                }\n\n                throw new Error('Cannot fetch an unsaved ParseObject');\n\n              case 9:\n                result = ParseObject.fromJSON(pinned);\n\n                this._finishFetch(result.toJSON());\n\n                return _context6.abrupt(\"return\", this);\n\n              case 12:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function () {\n        return _fetchFromLocalDatastore.apply(this, arguments);\n      };\n    }()\n    /** Static methods * */\n\n  }], [{\n    key: \"_clearAllState\",\n    value: function () {\n      var stateController = _CoreManager.default.getObjectStateController();\n\n      stateController.clearAllState();\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAll([object1, object2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     *   <li>include: The name(s) of the key(s) to include. Can be a string, an array of strings,\n     *       or an array of array of strings.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, true, queryOptions);\n    }\n    /**\n     * Fetches the given list of Parse.Object.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAll(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * Includes nested Parse.Objects for the provided key. You can use dot\n     * notation to specify which fields in the included object are also fetched.\n     *\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeededWithInclude([object1, object2, ...], [pointer1, pointer2, ...])\n     *    .then((list) => {\n     *      // All the objects were fetched.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {string | Array<string | Array<string>>} keys The name(s) of the key(s) to include.\n     * @param {object} options\n     * Valid options are:<ul>\n     *   <li>useMasterKey: In Cloud Code and Node only, causes the Master Key to\n     *     be used for this request.\n     *   <li>sessionToken: A valid session token, used for making a request on\n     *       behalf of a specific user.\n     * </ul>\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllIfNeededWithInclude\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , keys\n    /*: String | Array<string | Array<string>>*/\n    , options\n    /*: RequestOptions*/\n    ) {\n      options = options || {};\n      options.include = keys;\n      return ParseObject.fetchAllIfNeeded(list, options);\n    }\n    /**\n     * Fetches the given list of Parse.Object if needed.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     *   Parse.Object.fetchAllIfNeeded([object1, ...])\n     *    .then((list) => {\n     *      // Objects were fetched and updated.\n     *    }, (error) => {\n     *      // An error occurred while fetching one of the objects.\n     *    });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"fetchAllIfNeeded\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    , options) {\n      options = options || {};\n      var queryOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        queryOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        queryOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('include')) {\n        queryOptions.include = ParseObject.handleIncludeOptions(options);\n      }\n\n      return _CoreManager.default.getObjectController().fetch(list, false, queryOptions);\n    }\n  }, {\n    key: \"handleIncludeOptions\",\n    value: function (options) {\n      var include = [];\n\n      if ((0, _isArray.default)(options.include)) {\n        var _context7;\n\n        (0, _forEach.default)(_context7 = options.include).call(_context7, function (key) {\n          if ((0, _isArray.default)(key)) {\n            include = (0, _concat.default)(include).call(include, key);\n          } else {\n            include.push(key);\n          }\n        });\n      } else {\n        include.push(options.include);\n      }\n\n      return include;\n    }\n    /**\n     * Destroy the given list of models on the server if it was already persisted.\n     *\n     * <p>Unlike saveAll, if an error occurs while deleting an individual model,\n     * this method will continue trying to delete the rest of the models if\n     * possible, except in the case of a fatal error like a connection error.\n     *\n     * <p>In particular, the Parse.Error object returned in the case of error may\n     * be one of two types:\n     *\n     * <ul>\n     * <li>A Parse.Error.AGGREGATE_ERROR. This object's \"errors\" property is an\n     * array of other Parse.Error objects. Each error object in this array\n     * has an \"object\" property that references the object that could not be\n     * deleted (for instance, because that object could not be found).</li>\n     * <li>A non-aggregate Parse.Error. This indicates a serious error that\n     * caused the delete operation to be aborted partway through (for\n     * instance, a connection failure in the middle of the delete).</li>\n     * </ul>\n     *\n     * <pre>\n     * Parse.Object.destroyAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were deleted.\n     * }, (error) => {\n     * // An error occurred while deleting one or more of the objects.\n     * // If this is an aggregate error, then we can inspect each error\n     * // object individually to determine the reason why a particular\n     * // object was not deleted.\n     * if (error.code === Parse.Error.AGGREGATE_ERROR) {\n     * for (var i = 0; i < error.errors.length; i++) {\n     * console.log(\"Couldn't delete \" + error.errors[i].object.id +\n     * \"due to \" + error.errors[i].message);\n     * }\n     * } else {\n     * console.log(\"Delete aborted because of \" + error.message);\n     * }\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Promise} A promise that is fulfilled when the destroyAll\n     * completes.\n     */\n\n  }, {\n    key: \"destroyAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var destroyOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        destroyOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        destroyOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        destroyOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        destroyOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().destroy(list, destroyOptions);\n    }\n    /**\n     * Saves the given list of Parse.Object.\n     * If any error is encountered, stops and calls the error handler.\n     *\n     * <pre>\n     * Parse.Object.saveAll([object1, object2, ...])\n     * .then((list) => {\n     * // All the objects were saved.\n     * }, (error) => {\n     * // An error occurred while saving one of the objects.\n     * });\n     * </pre>\n     *\n     * @param {Array} list A list of <code>Parse.Object</code>.\n     * @param {object} options\n     * @static\n     * @returns {Parse.Object[]}\n     */\n\n  }, {\n    key: \"saveAll\",\n    value: function (list\n    /*: Array<ParseObject>*/\n    ) {\n      var options\n      /*: RequestOptions*/\n      = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var saveOptions = {};\n\n      if (options.hasOwnProperty('useMasterKey')) {\n        saveOptions.useMasterKey = options.useMasterKey;\n      }\n\n      if (options.hasOwnProperty('sessionToken')) {\n        saveOptions.sessionToken = options.sessionToken;\n      }\n\n      if (options.hasOwnProperty('batchSize') && typeof options.batchSize === 'number') {\n        saveOptions.batchSize = options.batchSize;\n      }\n\n      if (options.hasOwnProperty('context') && (0, _typeof2.default)(options.context) === 'object') {\n        saveOptions.context = options.context;\n      }\n\n      return _CoreManager.default.getObjectController().save(list, saveOptions);\n    }\n    /**\n     * Creates a reference to a subclass of Parse.Object with the given id. This\n     * does not exist on Parse.Object, only on subclasses.\n     *\n     * <p>A shortcut for: <pre>\n     *  var Foo = Parse.Object.extend(\"Foo\");\n     *  var pointerToFoo = new Foo();\n     *  pointerToFoo.id = \"myObjectId\";\n     * </pre>\n     *\n     * @param {string} id The ID of the object to create a reference to.\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference.\n     */\n\n  }, {\n    key: \"createWithoutData\",\n    value: function (id\n    /*: string*/\n    ) {\n      var obj = new this();\n      obj.id = id;\n      return obj;\n    }\n    /**\n     * Creates a new instance of a Parse Object from a JSON representation.\n     *\n     * @param {object} json The JSON map of the Object's data\n     * @param {boolean} override In single instance mode, all old server data\n     *   is overwritten if this is set to true\n     * @static\n     * @returns {Parse.Object} A Parse.Object reference\n     */\n\n  }, {\n    key: \"fromJSON\",\n    value: function (json\n    /*: any*/\n    , override\n    /*:: ?: boolean*/\n    ) {\n      if (!json.className) {\n        throw new Error('Cannot create an object without a className');\n      }\n\n      var constructor = classMap[json.className];\n      var o = constructor ? new constructor() : new ParseObject(json.className);\n      var otherAttributes = {};\n\n      for (var _attr12 in json) {\n        if (_attr12 !== 'className' && _attr12 !== '__type') {\n          otherAttributes[_attr12] = json[_attr12];\n        }\n      }\n\n      if (override) {\n        // id needs to be set before clearServerData can work\n        if (otherAttributes.objectId) {\n          o.id = otherAttributes.objectId;\n        }\n\n        var preserved = null;\n\n        if (typeof o._preserveFieldsOnFetch === 'function') {\n          preserved = o._preserveFieldsOnFetch();\n        }\n\n        o._clearServerData();\n\n        if (preserved) {\n          o._finishFetch(preserved);\n        }\n      }\n\n      o._finishFetch(otherAttributes);\n\n      if (json.objectId) {\n        o._setExisted(true);\n      }\n\n      return o;\n    }\n    /**\n     * Registers a subclass of Parse.Object with a specific class name.\n     * When objects of that class are retrieved from a query, they will be\n     * instantiated with this subclass.\n     * This is only necessary when using ES6 subclassing.\n     *\n     * @param {string} className The class name of the subclass\n     * @param {Function} constructor The subclass\n     */\n\n  }, {\n    key: \"registerSubclass\",\n    value: function (className\n    /*: string*/\n    , constructor\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        throw new TypeError('The first argument must be a valid class name.');\n      }\n\n      if (typeof constructor === 'undefined') {\n        throw new TypeError('You must supply a subclass constructor.');\n      }\n\n      if (typeof constructor !== 'function') {\n        throw new TypeError('You must register the subclass constructor. ' + 'Did you attempt to register an instance of the subclass?');\n      }\n\n      classMap[className] = constructor;\n\n      if (!constructor.className) {\n        constructor.className = className;\n      }\n    }\n    /**\n     * Creates a new subclass of Parse.Object for the given Parse class name.\n     *\n     * <p>Every extension of a Parse class will inherit from the most recent\n     * previous extension of that class. When a Parse.Object is automatically\n     * created by parsing JSON, it will use the most recent extension of that\n     * class.</p>\n     *\n     * <p>You should call either:<pre>\n     *     var MyClass = Parse.Object.extend(\"MyClass\", {\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre>\n     * or, for Backbone compatibility:<pre>\n     *     var MyClass = Parse.Object.extend({\n     *         className: \"MyClass\",\n     *         <i>Instance methods</i>,\n     *         initialize: function(attrs, options) {\n     *             this.someInstanceProperty = [],\n     *             <i>Other instance properties</i>\n     *         }\n     *     }, {\n     *         <i>Class properties</i>\n     *     });</pre></p>\n     *\n     * @param {string} className The name of the Parse class backing this model.\n     * @param {object} protoProps Instance properties to add to instances of the\n     *     class returned from this method.\n     * @param {object} classProps Class properties to add the class returned from\n     *     this method.\n     * @returns {Parse.Object} A new subclass of Parse.Object.\n     */\n\n  }, {\n    key: \"extend\",\n    value: function (className\n    /*: any*/\n    , protoProps\n    /*: any*/\n    , classProps\n    /*: any*/\n    ) {\n      if (typeof className !== 'string') {\n        if (className && typeof className.className === 'string') {\n          return ParseObject.extend(className.className, className, protoProps);\n        }\n\n        throw new Error(\"Parse.Object.extend's first argument should be the className.\");\n      }\n\n      var adjustedClassName = className;\n\n      if (adjustedClassName === 'User' && _CoreManager.default.get('PERFORM_USER_REWRITE')) {\n        adjustedClassName = '_User';\n      }\n\n      var parentProto = ParseObject.prototype;\n\n      if (this.hasOwnProperty('__super__') && this.__super__) {\n        parentProto = this.prototype;\n      } else if (classMap[adjustedClassName]) {\n        parentProto = classMap[adjustedClassName].prototype;\n      }\n\n      var ParseObjectSubclass = function (attributes, options) {\n        this.className = adjustedClassName;\n        this._objCount = objectCount++; // Enable legacy initializers\n\n        if (typeof this.initialize === 'function') {\n          this.initialize.apply(this, arguments);\n        }\n\n        if (attributes && (0, _typeof2.default)(attributes) === 'object') {\n          if (!this.set(attributes || {}, options)) {\n            throw new Error(\"Can't create an invalid Parse Object\");\n          }\n        }\n      };\n\n      ParseObjectSubclass.className = adjustedClassName;\n      ParseObjectSubclass.__super__ = parentProto;\n      ParseObjectSubclass.prototype = (0, _create.default)(parentProto, {\n        constructor: {\n          value: ParseObjectSubclass,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      });\n\n      if (protoProps) {\n        for (var prop in protoProps) {\n          if (prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass.prototype, prop, {\n              value: protoProps[prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      if (classProps) {\n        for (var _prop in classProps) {\n          if (_prop !== 'className') {\n            (0, _defineProperty2.default)(ParseObjectSubclass, _prop, {\n              value: classProps[_prop],\n              enumerable: false,\n              writable: true,\n              configurable: true\n            });\n          }\n        }\n      }\n\n      ParseObjectSubclass.extend = function (name, protoProps, classProps) {\n        if (typeof name === 'string') {\n          return ParseObject.extend.call(ParseObjectSubclass, name, protoProps, classProps);\n        }\n\n        return ParseObject.extend.call(ParseObjectSubclass, adjustedClassName, name, protoProps);\n      };\n\n      ParseObjectSubclass.createWithoutData = ParseObject.createWithoutData;\n      classMap[adjustedClassName] = ParseObjectSubclass;\n      return ParseObjectSubclass;\n    }\n    /**\n     * Enable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * This is disabled by default in server environments, since it can lead to\n     * security issues.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"enableSingleInstance\",\n    value: function () {\n      singleInstance = true;\n\n      _CoreManager.default.setObjectStateController(SingleInstanceStateController);\n    }\n    /**\n     * Disable single instance objects, where any local objects with the same Id\n     * share the same attributes, and stay synchronized with each other.\n     * When disabled, you can have two instances of the same object in memory\n     * without them sharing attributes.\n     *\n     * @static\n     */\n\n  }, {\n    key: \"disableSingleInstance\",\n    value: function () {\n      singleInstance = false;\n\n      _CoreManager.default.setObjectStateController(UniqueInstanceStateController);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAll([...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPin()</code>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.pinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously stores the objects and every object they point to in the local datastore, recursively.\n     *\n     * If those other objects have not been fetched from Parse, they will not be stored.\n     * However, if they have changed data, all the changes will be retained.\n     *\n     * <pre>\n     * await Parse.Object.pinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * To retrieve object:\n     * <code>query.fromLocalDatastore()</code> or <code>query.fromPinWithName(name)</code>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the pin completes.\n     * @static\n     */\n\n  }, {\n    key: \"pinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handlePinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore,\n     * recursively, using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAll([...]);\n     * </pre>\n     *\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAll\",\n    value: function (objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return ParseObject.unPinAllWithName(_LocalDatastoreUtils.DEFAULT_PIN, objects);\n    }\n    /**\n     * Asynchronously removes the objects and every object they point to in the local datastore, recursively.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllWithName(name, [obj1, obj2, ...]);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @param {Array} objects A list of <code>Parse.Object</code>.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllWithName\",\n    value: function (name\n    /*: string*/\n    , objects\n    /*: Array<ParseObject>*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore._handleUnPinAllWithName(name, objects);\n    }\n    /**\n     * Asynchronously removes all objects in the local datastore using a default pin name: _default.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjects();\n     * </pre>\n     *\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjects\",\n    value: function ()\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.DEFAULT_PIN);\n    }\n    /**\n     * Asynchronously removes all objects with the specified pin name.\n     * Deletes the pin name also.\n     *\n     * <pre>\n     * await Parse.Object.unPinAllObjectsWithName(name);\n     * </pre>\n     *\n     * @param {string} name Name of Pin.\n     * @returns {Promise} A promise that is fulfilled when the unPin completes.\n     * @static\n     */\n\n  }, {\n    key: \"unPinAllObjectsWithName\",\n    value: function (name\n    /*: string*/\n    )\n    /*: Promise<void>*/\n    {\n      var localDatastore = _CoreManager.default.getLocalDatastore();\n\n      if (!localDatastore.isEnabled) {\n        return _promise.default.reject('Parse.enableLocalDatastore() must be called first');\n      }\n\n      return localDatastore.unPinWithName(_LocalDatastoreUtils.PIN_PREFIX + name);\n    }\n  }]);\n  return ParseObject;\n}();\n\nvar DefaultController = {\n  fetch: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , forceFetch\n  /*: boolean*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var objs = [];\n      var ids = [];\n      var className = null;\n      var results = [];\n      var error = null;\n      (0, _forEach.default)(target).call(target, function (el) {\n        if (error) {\n          return;\n        }\n\n        if (!className) {\n          // eslint-disable-next-line prefer-destructuring\n          className = el.className;\n        }\n\n        if (className !== el.className) {\n          error = new _ParseError.default(_ParseError.default.INVALID_CLASS_NAME, 'All objects should be of the same class');\n        }\n\n        if (!el.id) {\n          error = new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'All objects must have an ID');\n        }\n\n        if (forceFetch || !el.isDataAvailable()) {\n          ids.push(el.id);\n          objs.push(el);\n        }\n\n        results.push(el);\n      });\n\n      if (error) {\n        return _promise.default.reject(error);\n      }\n\n      var query = new _ParseQuery.default(className);\n      query.containedIn('objectId', ids);\n\n      if (options && options.include) {\n        query.include(options.include);\n      }\n\n      query._limit = ids.length;\n      return (0, _find.default)(query).call(query, options).then( /*#__PURE__*/function () {\n        var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee4(objects) {\n          var idMap, i, obj, _i, _obj, id, _iterator2, _step2, object;\n\n          return _regenerator.default.wrap(function (_context8) {\n            while (1) {\n              switch (_context8.prev = _context8.next) {\n                case 0:\n                  idMap = {};\n                  (0, _forEach.default)(objects).call(objects, function (o) {\n                    idMap[o.id] = o;\n                  });\n                  i = 0;\n\n                case 3:\n                  if (!(i < objs.length)) {\n                    _context8.next = 11;\n                    break;\n                  }\n\n                  obj = objs[i];\n\n                  if (!(!obj || !obj.id || !idMap[obj.id])) {\n                    _context8.next = 8;\n                    break;\n                  }\n\n                  if (!forceFetch) {\n                    _context8.next = 8;\n                    break;\n                  }\n\n                  return _context8.abrupt(\"return\", _promise.default.reject(new _ParseError.default(_ParseError.default.OBJECT_NOT_FOUND, 'All objects must exist on the server.')));\n\n                case 8:\n                  i++;\n                  _context8.next = 3;\n                  break;\n\n                case 11:\n                  if (!singleInstance) {\n                    // If single instance objects are disabled, we need to replace the\n                    for (_i = 0; _i < results.length; _i++) {\n                      _obj = results[_i];\n\n                      if (_obj && _obj.id && idMap[_obj.id]) {\n                        id = _obj.id;\n\n                        _obj._finishFetch(idMap[id].toJSON());\n\n                        results[_i] = idMap[id];\n                      }\n                    }\n                  }\n\n                  _iterator2 = _createForOfIteratorHelper(results);\n                  _context8.prev = 13;\n\n                  _iterator2.s();\n\n                case 15:\n                  if ((_step2 = _iterator2.n()).done) {\n                    _context8.next = 21;\n                    break;\n                  }\n\n                  object = _step2.value;\n                  _context8.next = 19;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 19:\n                  _context8.next = 15;\n                  break;\n\n                case 21:\n                  _context8.next = 26;\n                  break;\n\n                case 23:\n                  _context8.prev = 23;\n                  _context8.t0 = _context8[\"catch\"](13);\n\n                  _iterator2.e(_context8.t0);\n\n                case 26:\n                  _context8.prev = 26;\n\n                  _iterator2.f();\n\n                  return _context8.finish(26);\n\n                case 29:\n                  return _context8.abrupt(\"return\", _promise.default.resolve(results));\n\n                case 30:\n                case \"end\":\n                  return _context8.stop();\n              }\n            }\n          }, _callee4, null, [[13, 23, 26, 29]]);\n        }));\n\n        return function () {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    if (target instanceof ParseObject) {\n      var _context9;\n\n      if (!target.id) {\n        return _promise.default.reject(new _ParseError.default(_ParseError.default.MISSING_OBJECT_ID, 'Object does not have an ID'));\n      }\n\n      var RESTController = _CoreManager.default.getRESTController();\n\n      var params = {};\n\n      if (options && options.include) {\n        params.include = options.include.join();\n      }\n\n      return RESTController.request('GET', (0, _concat.default)(_context9 = \"classes/\".concat(target.className, \"/\")).call(_context9, target._getId()), params, options).then( /*#__PURE__*/function () {\n        var _ref2 = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee5(response) {\n          return _regenerator.default.wrap(function (_context10) {\n            while (1) {\n              switch (_context10.prev = _context10.next) {\n                case 0:\n                  target._clearPendingOps();\n\n                  target._clearServerData();\n\n                  target._finishFetch(response);\n\n                  _context10.next = 5;\n                  return localDatastore._updateObjectIfPinned(target);\n\n                case 5:\n                  return _context10.abrupt(\"return\", target);\n\n                case 6:\n                case \"end\":\n                  return _context10.stop();\n              }\n            }\n          }, _callee5);\n        }));\n\n        return function () {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n\n    return _promise.default.resolve();\n  },\n  destroy: function (target\n  /*: ParseObject | Array<ParseObject>*/\n  , options\n  /*: RequestOptions*/\n  )\n  /*: Promise<Array<void> | ParseObject>*/\n  {\n    return (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee8() {\n      var batchSize, localDatastore, RESTController, batches, deleteCompleted, errors, _context14;\n\n      return _regenerator.default.wrap(function (_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n              localDatastore = _CoreManager.default.getLocalDatastore();\n              RESTController = _CoreManager.default.getRESTController();\n\n              if (!(0, _isArray.default)(target)) {\n                _context16.next = 13;\n                break;\n              }\n\n              if (!(target.length < 1)) {\n                _context16.next = 6;\n                break;\n              }\n\n              return _context16.abrupt(\"return\", _promise.default.resolve([]));\n\n            case 6:\n              batches = [[]];\n              (0, _forEach.default)(target).call(target, function (obj) {\n                if (!obj.id) {\n                  return;\n                }\n\n                batches[batches.length - 1].push(obj);\n\n                if (batches[batches.length - 1].length >= batchSize) {\n                  batches.push([]);\n                }\n              });\n\n              if (batches[batches.length - 1].length === 0) {\n                // If the last batch is empty, remove it\n                batches.pop();\n              }\n\n              deleteCompleted = _promise.default.resolve();\n              errors = [];\n              (0, _forEach.default)(batches).call(batches, function (batch) {\n                deleteCompleted = deleteCompleted.then(function () {\n                  return RESTController.request('POST', 'batch', {\n                    requests: (0, _map.default)(batch).call(batch, function (obj) {\n                      var _context11, _context12;\n\n                      return {\n                        method: 'DELETE',\n                        path: (0, _concat.default)(_context11 = (0, _concat.default)(_context12 = \"\".concat(getServerUrlPath(), \"classes/\")).call(_context12, obj.className, \"/\")).call(_context11, obj._getId()),\n                        body: {}\n                      };\n                    })\n                  }, options).then(function (results) {\n                    for (var i = 0; i < results.length; i++) {\n                      if (results[i] && results[i].hasOwnProperty('error')) {\n                        var err = new _ParseError.default(results[i].error.code, results[i].error.error);\n                        err.object = batch[i];\n                        errors.push(err);\n                      }\n                    }\n                  });\n                });\n              });\n              return _context16.abrupt(\"return\", deleteCompleted.then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee6() {\n                var aggregate, _iterator3, _step3, object;\n\n                return _regenerator.default.wrap(function (_context13) {\n                  while (1) {\n                    switch (_context13.prev = _context13.next) {\n                      case 0:\n                        if (!errors.length) {\n                          _context13.next = 4;\n                          break;\n                        }\n\n                        aggregate = new _ParseError.default(_ParseError.default.AGGREGATE_ERROR);\n                        aggregate.errors = errors;\n                        return _context13.abrupt(\"return\", _promise.default.reject(aggregate));\n\n                      case 4:\n                        _iterator3 = _createForOfIteratorHelper(target);\n                        _context13.prev = 5;\n\n                        _iterator3.s();\n\n                      case 7:\n                        if ((_step3 = _iterator3.n()).done) {\n                          _context13.next = 13;\n                          break;\n                        }\n\n                        object = _step3.value;\n                        _context13.next = 11;\n                        return localDatastore._destroyObjectIfPinned(object);\n\n                      case 11:\n                        _context13.next = 7;\n                        break;\n\n                      case 13:\n                        _context13.next = 18;\n                        break;\n\n                      case 15:\n                        _context13.prev = 15;\n                        _context13.t0 = _context13[\"catch\"](5);\n\n                        _iterator3.e(_context13.t0);\n\n                      case 18:\n                        _context13.prev = 18;\n\n                        _iterator3.f();\n\n                        return _context13.finish(18);\n\n                      case 21:\n                        return _context13.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 22:\n                      case \"end\":\n                        return _context13.stop();\n                    }\n                  }\n                }, _callee6, null, [[5, 15, 18, 21]]);\n              }))));\n\n            case 13:\n              if (!(target instanceof ParseObject)) {\n                _context16.next = 15;\n                break;\n              }\n\n              return _context16.abrupt(\"return\", RESTController.request('DELETE', (0, _concat.default)(_context14 = \"classes/\".concat(target.className, \"/\")).call(_context14, target._getId()), {}, options).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee7() {\n                return _regenerator.default.wrap(function (_context15) {\n                  while (1) {\n                    switch (_context15.prev = _context15.next) {\n                      case 0:\n                        _context15.next = 2;\n                        return localDatastore._destroyObjectIfPinned(target);\n\n                      case 2:\n                        return _context15.abrupt(\"return\", _promise.default.resolve(target));\n\n                      case 3:\n                      case \"end\":\n                        return _context15.stop();\n                    }\n                  }\n                }, _callee7);\n              }))));\n\n            case 15:\n              return _context16.abrupt(\"return\", _promise.default.resolve(target));\n\n            case 16:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee8);\n    }))();\n  },\n  save: function (target\n  /*: ParseObject | Array<ParseObject | ParseFile>*/\n  , options\n  /*: RequestOptions*/\n  ) {\n    var batchSize = options && options.batchSize ? options.batchSize : _CoreManager.default.get('REQUEST_BATCH_SIZE');\n\n    var localDatastore = _CoreManager.default.getLocalDatastore();\n\n    var mapIdForPin = {};\n\n    var RESTController = _CoreManager.default.getRESTController();\n\n    var stateController = _CoreManager.default.getObjectStateController();\n\n    options = options || {};\n    options.returnStatus = options.returnStatus || true;\n\n    if ((0, _isArray.default)(target)) {\n      if (target.length < 1) {\n        return _promise.default.resolve([]);\n      }\n\n      var unsaved = (0, _concat.default)(target).call(target);\n\n      for (var i = 0; i < target.length; i++) {\n        if (target[i] instanceof ParseObject) {\n          unsaved = (0, _concat.default)(unsaved).call(unsaved, (0, _unsavedChildren.default)(target[i], true));\n        }\n      }\n\n      unsaved = (0, _unique.default)(unsaved);\n      var filesSaved\n      /*: Array<ParseFile>*/\n      = [];\n      var pending\n      /*: Array<ParseObject>*/\n      = [];\n      (0, _forEach.default)(unsaved).call(unsaved, function (el) {\n        if (el instanceof _ParseFile.default) {\n          filesSaved.push(el.save(options));\n        } else if (el instanceof ParseObject) {\n          pending.push(el);\n        }\n      });\n      return _promise.default.all(filesSaved).then(function () {\n        var objectError = null;\n        return (0, _promiseUtils.continueWhile)(function () {\n          return pending.length > 0;\n        }, function () {\n          var batch = [];\n          var nextPending = [];\n          (0, _forEach.default)(pending).call(pending, function (el) {\n            if (batch.length < batchSize && (0, _canBeSerialized.default)(el)) {\n              batch.push(el);\n            } else {\n              nextPending.push(el);\n            }\n          });\n          pending = nextPending;\n\n          if (batch.length < 1) {\n            return _promise.default.reject(new _ParseError.default(_ParseError.default.OTHER_CAUSE, 'Tried to save a batch with a cycle.'));\n          } // Queue up tasks for each object in the batch.\n          // When every task is ready, the API request will execute\n\n\n          var batchReturned = new _promiseUtils.resolvingPromise();\n          var batchReady = [];\n          var batchTasks = [];\n          (0, _forEach.default)(batch).call(batch, function (obj, index) {\n            var ready = new _promiseUtils.resolvingPromise();\n            batchReady.push(ready);\n            stateController.pushPendingState(obj._getStateIdentifier());\n            batchTasks.push(stateController.enqueueTask(obj._getStateIdentifier(), function () {\n              ready.resolve();\n              return batchReturned.then(function (responses) {\n                if (responses[index].hasOwnProperty('success')) {\n                  var objectId = responses[index].success.objectId;\n                  var status = responses[index]._status;\n                  delete responses[index]._status;\n                  mapIdForPin[objectId] = obj._localId;\n\n                  obj._handleSaveResponse(responses[index].success, status);\n                } else {\n                  if (!objectError && responses[index].hasOwnProperty('error')) {\n                    var serverError = responses[index].error;\n                    objectError = new _ParseError.default(serverError.code, serverError.error); // Cancel the rest of the save\n\n                    pending = [];\n                  }\n\n                  obj._handleSaveError();\n                }\n              });\n            }));\n          });\n          (0, _promiseUtils.when)(batchReady).then(function () {\n            // Kick off the batch request\n            return RESTController.request('POST', 'batch', {\n              requests: (0, _map.default)(batch).call(batch, function (obj) {\n                var params = obj._getSaveParams();\n\n                params.path = getServerUrlPath() + params.path;\n                return params;\n              })\n            }, options);\n          }).then(batchReturned.resolve, function (error) {\n            batchReturned.reject(new _ParseError.default(_ParseError.default.INCORRECT_TYPE, error.message));\n          });\n          return (0, _promiseUtils.when)(batchTasks);\n        }).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee9() {\n          var _iterator4, _step4, object;\n\n          return _regenerator.default.wrap(function (_context17) {\n            while (1) {\n              switch (_context17.prev = _context17.next) {\n                case 0:\n                  if (!objectError) {\n                    _context17.next = 2;\n                    break;\n                  }\n\n                  return _context17.abrupt(\"return\", _promise.default.reject(objectError));\n\n                case 2:\n                  _iterator4 = _createForOfIteratorHelper(target);\n                  _context17.prev = 3;\n\n                  _iterator4.s();\n\n                case 5:\n                  if ((_step4 = _iterator4.n()).done) {\n                    _context17.next = 13;\n                    break;\n                  }\n\n                  object = _step4.value;\n                  _context17.next = 9;\n                  return localDatastore._updateLocalIdForObject(mapIdForPin[object.id], object);\n\n                case 9:\n                  _context17.next = 11;\n                  return localDatastore._updateObjectIfPinned(object);\n\n                case 11:\n                  _context17.next = 5;\n                  break;\n\n                case 13:\n                  _context17.next = 18;\n                  break;\n\n                case 15:\n                  _context17.prev = 15;\n                  _context17.t0 = _context17[\"catch\"](3);\n\n                  _iterator4.e(_context17.t0);\n\n                case 18:\n                  _context17.prev = 18;\n\n                  _iterator4.f();\n\n                  return _context17.finish(18);\n\n                case 21:\n                  return _context17.abrupt(\"return\", _promise.default.resolve(target));\n\n                case 22:\n                case \"end\":\n                  return _context17.stop();\n              }\n            }\n          }, _callee9, null, [[3, 15, 18, 21]]);\n        })));\n      });\n    }\n\n    if (target instanceof ParseObject) {\n      // generate _localId in case if cascadeSave=false\n      target._getId();\n\n      var localId = target._localId; // copying target lets Flow guarantee the pointer isn't modified elsewhere\n\n      var targetCopy = target;\n\n      var task = function () {\n        var params = targetCopy._getSaveParams();\n\n        return RESTController.request(params.method, params.path, params.body, options).then(function (response) {\n          var status = response._status;\n          delete response._status;\n\n          targetCopy._handleSaveResponse(response, status);\n        }, function (error) {\n          targetCopy._handleSaveError();\n\n          return _promise.default.reject(error);\n        });\n      };\n\n      stateController.pushPendingState(target._getStateIdentifier());\n      return stateController.enqueueTask(target._getStateIdentifier(), task).then( /*#__PURE__*/(0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee10() {\n        return _regenerator.default.wrap(function (_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return localDatastore._updateLocalIdForObject(localId, target);\n\n              case 2:\n                _context18.next = 4;\n                return localDatastore._updateObjectIfPinned(target);\n\n              case 4:\n                return _context18.abrupt(\"return\", target);\n\n              case 5:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee10);\n      })), function (error) {\n        return _promise.default.reject(error);\n      });\n    }\n\n    return _promise.default.resolve();\n  }\n};\n\n_CoreManager.default.setObjectController(DefaultController);\n\nvar _default = ParseObject;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}