{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Kye Goullet\\\\Documents\\\\opensea Dapp\\\\ethereum-nft-marketplace-boilerplate\\\\src\\\\components\\\\NFTMarketTransactions.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useMoralis, useMoralisQuery } from \"react-moralis\";\nimport { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport { Table, Tag, Space } from \"antd\";\nimport { PolygonCurrency } from \"./Chains/Logos\";\nimport moment from \"moment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst styles = {\n  table: {\n    margin: \"0 auto\",\n    width: \"1000px\"\n  }\n};\n\nfunction NFTMarketTransactions() {\n  _s();\n\n  const {\n    walletAddress\n  } = useMoralisDapp();\n  const {\n    Moralis\n  } = useMoralis();\n  const queryItemImages = useMoralisQuery(\"ItemImages\");\n  const fetchItemImages = JSON.parse(JSON.stringify(queryItemImages.data, [\"nftContract\", \"tokenId\", \"name\", \"image\"]));\n  const queryMarketItems = useMoralisQuery(\"MarketItems\");\n  const fetchMarketItems = JSON.parse(JSON.stringify(queryMarketItems.data, [\"updatedAt\", \"price\", \"nftContract\", \"itemId\", \"sold\", \"tokenId\", \"seller\", \"owner\"])).filter(item => item.seller === walletAddress || item.owner === walletAddress).sort((a, b) => a.updatedAt < b.updatedAt ? 1 : b.updatedAt < a.updatedAt ? -1 : 0);\n\n  function getImage(addrs, id) {\n    const img = fetchItemImages.find(element => element.nftContract === addrs && element.tokenId === id);\n    return img === null || img === void 0 ? void 0 : img.image;\n  }\n\n  function getName(addrs, id) {\n    const nme = fetchItemImages.find(element => element.nftContract === addrs && element.tokenId === id);\n    return nme === null || nme === void 0 ? void 0 : nme.name;\n  }\n\n  const columns = [{\n    title: \"Date\",\n    dataIndex: \"date\",\n    key: \"date\"\n  }, {\n    title: \"Item\",\n    key: \"item\",\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Space, {\n      size: \"middle\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: getImage(record.collection, record.item),\n        style: {\n          width: \"40px\",\n          borderRadius: \"4px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"#\", record.item]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this)\n  }, {\n    title: \"Collection\",\n    key: \"collection\",\n    render: (text, record) => /*#__PURE__*/_jsxDEV(Space, {\n      size: \"middle\",\n      children: /*#__PURE__*/_jsxDEV(\"span\", {\n        children: getName(record.collection, record.item)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, {\n    title: \"Transaction Status\",\n    key: \"tags\",\n    dataIndex: \"tags\",\n    render: tags => /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: tags.map(tag => {\n        let color = \"geekblue\";\n        let status = \"BUY\";\n\n        if (tag === false) {\n          color = \"volcano\";\n          status = \"waiting\";\n        } else if (tag === true) {\n          color = \"green\";\n          status = \"confirmed\";\n        }\n\n        if (tag === walletAddress) {\n          status = \"SELL\";\n        }\n\n        return /*#__PURE__*/_jsxDEV(Tag, {\n          color: color,\n          children: status.toUpperCase()\n        }, tag, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false)\n  }, {\n    title: \"Price\",\n    key: \"price\",\n    dataIndex: \"price\",\n    render: e => /*#__PURE__*/_jsxDEV(Space, {\n      size: \"middle\",\n      children: [/*#__PURE__*/_jsxDEV(PolygonCurrency, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: e\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 9\n    }, this)\n  }];\n  const data = fetchMarketItems === null || fetchMarketItems === void 0 ? void 0 : fetchMarketItems.map((item, index) => ({\n    key: index,\n    date: moment(item.updatedAt).format(\"DD-MM-YYYY HH:mm\"),\n    collection: item.nftContract,\n    item: item.tokenId,\n    tags: [item.seller, item.sold],\n    price: item.price / (\"1e\" + 18)\n  }));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.table,\n        children: /*#__PURE__*/_jsxDEV(Table, {\n          columns: columns,\n          dataSource: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n\n_s(NFTMarketTransactions, \"V3iZLDCUtlN0zU1Ubc+X514LyA8=\", false, function () {\n  return [useMoralisDapp, useMoralis, useMoralisQuery, useMoralisQuery];\n});\n\n_c = NFTMarketTransactions;\nexport default NFTMarketTransactions;\nconst columns = [{\n  title: \"Date\",\n  dataIndex: \"date\",\n  key: \"date\"\n}, {\n  title: \"Item\",\n  key: \"item\"\n}, {\n  title: \"Collection\",\n  key: \"collection\"\n}, {\n  title: \"Transaction Status\",\n  key: \"tags\",\n  dataIndex: \"tags\"\n}, {\n  title: \"Price\",\n  key: \"price\",\n  dataIndex: \"price\"\n}];\n\nvar _c;\n\n$RefreshReg$(_c, \"NFTMarketTransactions\");","map":{"version":3,"sources":["C:/Users/Kye Goullet/Documents/opensea Dapp/ethereum-nft-marketplace-boilerplate/src/components/NFTMarketTransactions.jsx"],"names":["React","useState","useMoralis","useMoralisQuery","useMoralisDapp","Table","Tag","Space","PolygonCurrency","moment","styles","table","margin","width","NFTMarketTransactions","walletAddress","Moralis","queryItemImages","fetchItemImages","JSON","parse","stringify","data","queryMarketItems","fetchMarketItems","filter","item","seller","owner","sort","a","b","updatedAt","getImage","addrs","id","img","find","element","nftContract","tokenId","image","getName","nme","name","columns","title","dataIndex","key","render","text","record","collection","borderRadius","tags","map","tag","color","status","toUpperCase","e","index","date","format","sold","price"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useMoralis, useMoralisQuery } from \"react-moralis\";\r\nimport { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\nimport { Table, Tag, Space } from \"antd\";\r\nimport { PolygonCurrency} from \"./Chains/Logos\";\r\nimport moment from \"moment\";\r\n\r\nconst styles = {\r\n  table: {\r\n    margin: \"0 auto\",\r\n    width: \"1000px\",\r\n  },\r\n};\r\n\r\nfunction NFTMarketTransactions() {\r\n  const { walletAddress } = useMoralisDapp();\r\n  const { Moralis } = useMoralis();\r\n  const queryItemImages = useMoralisQuery(\"ItemImages\");\r\n  const fetchItemImages = JSON.parse(\r\n    JSON.stringify(queryItemImages.data, [\r\n      \"nftContract\",\r\n      \"tokenId\",\r\n      \"name\",\r\n      \"image\",\r\n    ])\r\n  );\r\n  const queryMarketItems = useMoralisQuery(\"MarketItems\");\r\n  const fetchMarketItems = JSON.parse(\r\n    JSON.stringify(queryMarketItems.data, [\r\n      \"updatedAt\",\r\n      \"price\",\r\n      \"nftContract\",\r\n      \"itemId\",\r\n      \"sold\",\r\n      \"tokenId\",\r\n      \"seller\",\r\n      \"owner\",\r\n    ])\r\n  )\r\n    .filter(\r\n      (item) => item.seller === walletAddress || item.owner === walletAddress\r\n    )\r\n    .sort((a, b) =>\r\n      a.updatedAt < b.updatedAt ? 1 : b.updatedAt < a.updatedAt ? -1 : 0\r\n    );\r\n\r\n  function getImage(addrs, id) {\r\n    const img = fetchItemImages.find(\r\n      (element) =>\r\n        element.nftContract === addrs &&\r\n        element.tokenId === id\r\n    );\r\n    return img?.image;\r\n  }\r\n\r\n  function getName(addrs, id) {\r\n    const nme = fetchItemImages.find(\r\n      (element) =>\r\n        element.nftContract === addrs &&\r\n        element.tokenId === id\r\n    );\r\n    return nme?.name;\r\n  }\r\n\r\n\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Date\",\r\n      dataIndex: \"date\",\r\n      key: \"date\",\r\n    },\r\n    {\r\n      title: \"Item\",\r\n      key: \"item\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <img src={getImage(record.collection, record.item)} style={{ width: \"40px\", borderRadius:\"4px\"}} />\r\n          <span>#{record.item}</span>\r\n        </Space>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Collection\",\r\n      key: \"collection\",\r\n      render: (text, record) => (\r\n        <Space size=\"middle\">\r\n          <span>{getName(record.collection, record.item)}</span>\r\n        </Space>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Transaction Status\",\r\n      key: \"tags\",\r\n      dataIndex: \"tags\",\r\n      render: (tags) => (\r\n        <>\r\n          {tags.map((tag) => {\r\n            let color = \"geekblue\";\r\n            let status = \"BUY\";\r\n            if (tag === false) {\r\n              color = \"volcano\";\r\n              status = \"waiting\";\r\n            } else if (tag === true) {\r\n              color = \"green\";\r\n              status = \"confirmed\";\r\n            }\r\n            if (tag === walletAddress) {\r\n              status = \"SELL\";\r\n            }\r\n            return (\r\n              <Tag color={color} key={tag}>\r\n                {status.toUpperCase()}\r\n              </Tag>\r\n            );\r\n          })}\r\n        </>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Price\",\r\n      key: \"price\",\r\n      dataIndex: \"price\",\r\n      render: (e) => (\r\n        <Space size=\"middle\">\r\n          <PolygonCurrency/>\r\n          <span>{e}</span>\r\n        </Space>\r\n      ),\r\n    }\r\n  ];\r\n\r\n  const data = fetchMarketItems?.map((item, index) => ({\r\n    key: index,\r\n    date: moment(item.updatedAt).format(\"DD-MM-YYYY HH:mm\"),\r\n    collection: item.nftContract,\r\n    item: item.tokenId,\r\n    tags: [item.seller, item.sold],\r\n    price: item.price / (\"1e\" + 18)\r\n  }));\r\n\r\n  return (\r\n    <>\r\n      <div>\r\n        <div style={styles.table}>\r\n          <Table columns={columns} dataSource={data} />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default NFTMarketTransactions;\r\nconst columns = [\r\n  {\r\n    title: \"Date\",\r\n    dataIndex: \"date\",\r\n    key: \"date\",\r\n  },\r\n  {\r\n    title: \"Item\",\r\n    key: \"item\",\r\n\r\n  },\r\n  {\r\n    title: \"Collection\",\r\n    key: \"collection\",\r\n  },\r\n  {\r\n    title: \"Transaction Status\",\r\n    key: \"tags\",\r\n    dataIndex: \"tags\",\r\n  },\r\n  {\r\n    title: \"Price\",\r\n    key: \"price\",\r\n    dataIndex: \"price\",\r\n  }\r\n];"]},"metadata":{},"sourceType":"module"}