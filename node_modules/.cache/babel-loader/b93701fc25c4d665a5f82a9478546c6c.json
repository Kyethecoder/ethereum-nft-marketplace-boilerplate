{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\nimport { useEffect, useState } from \"react\";\nimport { useMoralisWeb3Api, useMoralisWeb3ApiCall } from \"react-moralis\";\nimport { useIPFS } from \"./useIPFS\";\nexport const useNFTBalance = options => {\n  _s();\n\n  const {\n    account\n  } = useMoralisWeb3Api();\n  const {\n    chainId\n  } = useMoralisDapp();\n  const {\n    resolveLink\n  } = useIPFS();\n  const [NFTBalance, setNFTBalance] = useState([]);\n  const {\n    fetch: getNFTBalance,\n    data,\n    error,\n    isLoading\n  } = useMoralisWeb3ApiCall(account.getNFTs, {\n    chain: chainId,\n    ...options\n  });\n  const [fetchSuccess, setFetchSuccess] = useState(true);\n  useEffect(async () => {\n    if (data === null || data === void 0 ? void 0 : data.result) {\n      const NFTs = data.result;\n      setFetchSuccess(true);\n\n      for (let NFT of NFTs) {\n        if (NFT === null || NFT === void 0 ? void 0 : NFT.metadata) {\n          var _NFT$metadata;\n\n          NFT.metadata = JSON.parse(NFT.metadata);\n          NFT.image = resolveLink((_NFT$metadata = NFT.metadata) === null || _NFT$metadata === void 0 ? void 0 : _NFT$metadata.image);\n        } else if (NFT === null || NFT === void 0 ? void 0 : NFT.token_uri) {\n          try {\n            await fetch(NFT.token_uri).then(response => response.json()).then(data => {\n              NFT.image = resolveLink(data.image);\n            });\n          } catch (error) {\n            setFetchSuccess(false);\n            /*          !!Temporary work around to avoid CORS issues when retrieving NFT images!!\r\n                        Create a proxy server as per https://dev.to/terieyenike/how-to-create-a-proxy-server-on-heroku-5b5c\r\n                        Replace <your url here> with your proxy server_url below\r\n                        Remove comments :)\r\n            \r\n                          try {\r\n                            await fetch(`<your url here>/${NFT.token_uri}`)\r\n                            .then(response => response.json())\r\n                            .then(data => {\r\n                              NFT.image = resolveLink(data.image);\r\n                            });\r\n                          } catch (error) {\r\n                            setFetchSuccess(false);\r\n                          }\r\n            \r\n             */\n          }\n        }\n      }\n\n      setNFTBalance(NFTs);\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, [data]);\n  return {\n    getNFTBalance,\n    NFTBalance,\n    fetchSuccess,\n    error,\n    isLoading\n  };\n};\n\n_s(useNFTBalance, \"60kZk2h3UhyvLiHeBc/sULWBduk=\", false, function () {\n  return [useMoralisWeb3Api, useMoralisDapp, useIPFS, useMoralisWeb3ApiCall];\n});","map":{"version":3,"sources":["C:/Users/Kye Goullet/Documents/opensea Dapp/ethereum-nft-marketplace-boilerplate/src/hooks/useNFTBalance.js"],"names":["useMoralisDapp","useEffect","useState","useMoralisWeb3Api","useMoralisWeb3ApiCall","useIPFS","useNFTBalance","options","account","chainId","resolveLink","NFTBalance","setNFTBalance","fetch","getNFTBalance","data","error","isLoading","getNFTs","chain","fetchSuccess","setFetchSuccess","result","NFTs","NFT","metadata","JSON","parse","image","token_uri","then","response","json"],"mappings":";;AAAA,SAASA,cAAT,QAA+B,mDAA/B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,iBAAT,EAA4BC,qBAA5B,QAAyD,eAAzD;AACA,SAASC,OAAT,QAAwB,WAAxB;AAEA,OAAO,MAAMC,aAAa,GAAIC,OAAD,IAAa;AAAA;;AACxC,QAAM;AAAEC,IAAAA;AAAF,MAAcL,iBAAiB,EAArC;AACA,QAAM;AAAEM,IAAAA;AAAF,MAAcT,cAAc,EAAlC;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAkBL,OAAO,EAA/B;AACA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM;AACJW,IAAAA,KAAK,EAAEC,aADH;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA;AAJI,MAKFb,qBAAqB,CAACI,OAAO,CAACU,OAAT,EAAkB;AAAEC,IAAAA,KAAK,EAAEV,OAAT;AAAkB,OAAGF;AAArB,GAAlB,CALzB;AAMA,QAAM,CAACa,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAAC,IAAD,CAAhD;AAEAD,EAAAA,SAAS,CAAC,YAAY;AACpB,QAAIc,IAAJ,aAAIA,IAAJ,uBAAIA,IAAI,CAAEO,MAAV,EAAkB;AAChB,YAAMC,IAAI,GAAGR,IAAI,CAACO,MAAlB;AACAD,MAAAA,eAAe,CAAC,IAAD,CAAf;;AACA,WAAK,IAAIG,GAAT,IAAgBD,IAAhB,EAAsB;AACpB,YAAIC,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAEC,QAAT,EAAmB;AAAA;;AACjBD,UAAAA,GAAG,CAACC,QAAJ,GAAeC,IAAI,CAACC,KAAL,CAAWH,GAAG,CAACC,QAAf,CAAf;AACAD,UAAAA,GAAG,CAACI,KAAJ,GAAYlB,WAAW,kBAACc,GAAG,CAACC,QAAL,kDAAC,cAAcG,KAAf,CAAvB;AACD,SAHD,MAGO,IAAIJ,GAAJ,aAAIA,GAAJ,uBAAIA,GAAG,CAAEK,SAAT,EAAoB;AACzB,cAAI;AACF,kBAAMhB,KAAK,CAACW,GAAG,CAACK,SAAL,CAAL,CACHC,IADG,CACGC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EADhB,EAEHF,IAFG,CAEGf,IAAD,IAAU;AACdS,cAAAA,GAAG,CAACI,KAAJ,GAAYlB,WAAW,CAACK,IAAI,CAACa,KAAN,CAAvB;AACD,aAJG,CAAN;AAKD,WAND,CAME,OAAOZ,KAAP,EAAc;AACdK,YAAAA,eAAe,CAAC,KAAD,CAAf;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACW;AACF;AACF;;AACDT,MAAAA,aAAa,CAACW,IAAD,CAAb;AACD,KAtCmB,CAuCpB;;AACD,GAxCQ,EAwCN,CAACR,IAAD,CAxCM,CAAT;AA0CA,SAAO;AAAED,IAAAA,aAAF;AAAiBH,IAAAA,UAAjB;AAA6BS,IAAAA,YAA7B;AAA2CJ,IAAAA,KAA3C;AAAkDC,IAAAA;AAAlD,GAAP;AACD,CAxDM;;GAAMX,a;UACSH,iB,EACAH,c,EACIK,O,EAOpBD,qB","sourcesContent":["import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { useMoralisWeb3Api, useMoralisWeb3ApiCall } from \"react-moralis\";\r\nimport { useIPFS } from \"./useIPFS\";\r\n\r\nexport const useNFTBalance = (options) => {\r\n  const { account } = useMoralisWeb3Api();\r\n  const { chainId } = useMoralisDapp();\r\n  const { resolveLink } = useIPFS();\r\n  const [NFTBalance, setNFTBalance] = useState([]);\r\n  const {\r\n    fetch: getNFTBalance,\r\n    data,\r\n    error,\r\n    isLoading,\r\n  } = useMoralisWeb3ApiCall(account.getNFTs, { chain: chainId, ...options });\r\n  const [fetchSuccess, setFetchSuccess] = useState(true);\r\n\r\n  useEffect(async () => {\r\n    if (data?.result) {\r\n      const NFTs = data.result;\r\n      setFetchSuccess(true);\r\n      for (let NFT of NFTs) {\r\n        if (NFT?.metadata) {\r\n          NFT.metadata = JSON.parse(NFT.metadata);\r\n          NFT.image = resolveLink(NFT.metadata?.image);\r\n        } else if (NFT?.token_uri) {\r\n          try {\r\n            await fetch(NFT.token_uri)\r\n              .then((response) => response.json())\r\n              .then((data) => {\r\n                NFT.image = resolveLink(data.image);\r\n              });\r\n          } catch (error) {\r\n            setFetchSuccess(false);\r\n\r\n/*          !!Temporary work around to avoid CORS issues when retrieving NFT images!!\r\n            Create a proxy server as per https://dev.to/terieyenike/how-to-create-a-proxy-server-on-heroku-5b5c\r\n            Replace <your url here> with your proxy server_url below\r\n            Remove comments :)\r\n\r\n              try {\r\n                await fetch(`<your url here>/${NFT.token_uri}`)\r\n                .then(response => response.json())\r\n                .then(data => {\r\n                  NFT.image = resolveLink(data.image);\r\n                });\r\n              } catch (error) {\r\n                setFetchSuccess(false);\r\n              }\r\n\r\n */\r\n          }\r\n        }\r\n      }\r\n      setNFTBalance(NFTs);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data]);\r\n\r\n  return { getNFTBalance, NFTBalance, fetchSuccess, error, isLoading };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}