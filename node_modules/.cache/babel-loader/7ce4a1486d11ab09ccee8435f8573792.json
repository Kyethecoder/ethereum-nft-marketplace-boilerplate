{"ast":null,"code":"export const n6 = new Intl.NumberFormat(\"en-us\", {\n  style: \"decimal\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 6\n});\nexport const n4 = new Intl.NumberFormat(\"en-us\", {\n  style: \"decimal\",\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 4\n});\nexport const c2 = new Intl.NumberFormat(\"en-us\", {\n  style: \"currency\",\n  currency: \"USD\",\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\n/**\r\n * Returns a string of form \"abc...xyz\"\r\n * @param {string} str string to string\r\n * @param {number} n number of chars to keep at front/end\r\n * @returns {string}\r\n */\n\nexport const getEllipsisTxt = function (str) {\n  let n = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 6;\n\n  if (str) {\n    return `${str.substr(0, n)}...${str.substr(str.length - n, str.length)}`;\n  }\n\n  return \"\";\n};\nexport const tokenValue = (value, decimals) => decimals ? value / Math.pow(10, decimals) : value;\n/**\r\n * Return a formatted string with the symbol at the end\r\n * @param {number} value integer value\r\n * @param {number} decimals number of decimals\r\n * @param {string} symbol token symbol\r\n * @returns {string}\r\n */\n\nexport const tokenValueTxt = (value, decimals, symbol) => `${n4.format(tokenValue(value, decimals))} ${symbol}`;","map":{"version":3,"names":["n6","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","n4","c2","currency","getEllipsisTxt","str","n","substr","length","tokenValue","value","decimals","Math","pow","tokenValueTxt","symbol","format"],"sources":["C:/Users/Kye Goullet/Documents/opensea Dapp/ethereum-nft-marketplace-boilerplate/src/helpers/formatters.js"],"sourcesContent":["export const n6 = new Intl.NumberFormat(\"en-us\", {\r\n  style: \"decimal\",\r\n  minimumFractionDigits: 0,\r\n  maximumFractionDigits: 6,\r\n});\r\nexport const n4 = new Intl.NumberFormat(\"en-us\", {\r\n  style: \"decimal\",\r\n  minimumFractionDigits: 0,\r\n  maximumFractionDigits: 4,\r\n});\r\n\r\nexport const c2 = new Intl.NumberFormat(\"en-us\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\n/**\r\n * Returns a string of form \"abc...xyz\"\r\n * @param {string} str string to string\r\n * @param {number} n number of chars to keep at front/end\r\n * @returns {string}\r\n */\r\nexport const getEllipsisTxt = (str, n = 6) => {\r\n  if (str) {\r\n    return `${str.substr(0, n)}...${str.substr(str.length - n, str.length)}`;\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport const tokenValue = (value, decimals) => (decimals ? value / Math.pow(10, decimals) : value);\r\n\r\n/**\r\n * Return a formatted string with the symbol at the end\r\n * @param {number} value integer value\r\n * @param {number} decimals number of decimals\r\n * @param {string} symbol token symbol\r\n * @returns {string}\r\n */\r\nexport const tokenValueTxt = (value, decimals, symbol) => `${n4.format(tokenValue(value, decimals))} ${symbol}`;\r\n"],"mappings":"AAAA,OAAO,MAAMA,EAAE,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EAC/CC,KAAK,EAAE,SADwC;EAE/CC,qBAAqB,EAAE,CAFwB;EAG/CC,qBAAqB,EAAE;AAHwB,CAA/B,CAAX;AAKP,OAAO,MAAMC,EAAE,GAAG,IAAIL,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EAC/CC,KAAK,EAAE,SADwC;EAE/CC,qBAAqB,EAAE,CAFwB;EAG/CC,qBAAqB,EAAE;AAHwB,CAA/B,CAAX;AAMP,OAAO,MAAME,EAAE,GAAG,IAAIN,IAAI,CAACC,YAAT,CAAsB,OAAtB,EAA+B;EAC/CC,KAAK,EAAE,UADwC;EAE/CK,QAAQ,EAAE,KAFqC;EAG/CJ,qBAAqB,EAAE,CAHwB;EAI/CC,qBAAqB,EAAE;AAJwB,CAA/B,CAAX;AAOP;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,cAAc,GAAG,UAACC,GAAD,EAAgB;EAAA,IAAVC,CAAU,uEAAN,CAAM;;EAC5C,IAAID,GAAJ,EAAS;IACP,OAAQ,GAAEA,GAAG,CAACE,MAAJ,CAAW,CAAX,EAAcD,CAAd,CAAiB,MAAKD,GAAG,CAACE,MAAJ,CAAWF,GAAG,CAACG,MAAJ,GAAaF,CAAxB,EAA2BD,GAAG,CAACG,MAA/B,CAAuC,EAAvE;EACD;;EACD,OAAO,EAAP;AACD,CALM;AAOP,OAAO,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAsBA,QAAQ,GAAGD,KAAK,GAAGE,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaF,QAAb,CAAX,GAAoCD,KAArF;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMI,aAAa,GAAG,CAACJ,KAAD,EAAQC,QAAR,EAAkBI,MAAlB,KAA8B,GAAEd,EAAE,CAACe,MAAH,CAAUP,UAAU,CAACC,KAAD,EAAQC,QAAR,CAApB,CAAuC,IAAGI,MAAO,EAAvG"},"metadata":{},"sourceType":"module"}